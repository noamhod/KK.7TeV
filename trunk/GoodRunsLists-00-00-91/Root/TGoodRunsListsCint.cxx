//
// File generated by /srv01/tau/hod/root/bin/rootcint at Thu Nov 25 11:30:10 2010

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TGoodRunsListsCint.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace Root {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Root_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Root", 0 /*version*/, "./../GoodRunsLists/TGoodRunsListReader.h", 25,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Root_Dictionary, 0);
         return &instance;
      }
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Root_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   void RootcLcLRegularFormula_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLRegularFormula(void *p = 0);
   static void *newArray_RootcLcLRegularFormula(Long_t size, void *p);
   static void delete_RootcLcLRegularFormula(void *p);
   static void deleteArray_RootcLcLRegularFormula(void *p);
   static void destruct_RootcLcLRegularFormula(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::RegularFormula*)
   {
      ::Root::RegularFormula *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::RegularFormula >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::RegularFormula", ::Root::RegularFormula::Class_Version(), "./../GoodRunsLists/RegularFormula.h", 18,
                  typeid(::Root::RegularFormula), DefineBehavior(ptr, ptr),
                  &::Root::RegularFormula::Dictionary, isa_proxy, 0,
                  sizeof(::Root::RegularFormula) );
      instance.SetNew(&new_RootcLcLRegularFormula);
      instance.SetNewArray(&newArray_RootcLcLRegularFormula);
      instance.SetDelete(&delete_RootcLcLRegularFormula);
      instance.SetDeleteArray(&deleteArray_RootcLcLRegularFormula);
      instance.SetDestructor(&destruct_RootcLcLRegularFormula);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::RegularFormula*)
   {
      return GenerateInitInstanceLocal((::Root::RegularFormula*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::RegularFormula*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTLumiBlockRange_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLTLumiBlockRange(void *p = 0);
   static void *newArray_RootcLcLTLumiBlockRange(Long_t size, void *p);
   static void delete_RootcLcLTLumiBlockRange(void *p);
   static void deleteArray_RootcLcLTLumiBlockRange(void *p);
   static void destruct_RootcLcLTLumiBlockRange(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TLumiBlockRange*)
   {
      ::Root::TLumiBlockRange *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::TLumiBlockRange >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TLumiBlockRange", ::Root::TLumiBlockRange::Class_Version(), "../GoodRunsLists/TLumiBlockRange.h", 17,
                  typeid(::Root::TLumiBlockRange), DefineBehavior(ptr, ptr),
                  &::Root::TLumiBlockRange::Dictionary, isa_proxy, 4,
                  sizeof(::Root::TLumiBlockRange) );
      instance.SetNew(&new_RootcLcLTLumiBlockRange);
      instance.SetNewArray(&newArray_RootcLcLTLumiBlockRange);
      instance.SetDelete(&delete_RootcLcLTLumiBlockRange);
      instance.SetDeleteArray(&deleteArray_RootcLcLTLumiBlockRange);
      instance.SetDestructor(&destruct_RootcLcLTLumiBlockRange);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TLumiBlockRange*)
   {
      return GenerateInitInstanceLocal((::Root::TLumiBlockRange*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TLumiBlockRange*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p);
   static void destruct_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)
   {
      ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator", "/srv01/tau/hod/root/cint/cint/lib/prec_stl/vector", 215,
                  typeid(::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator) );
      instance.SetNew(&new_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTGoodRun_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLTGoodRun(void *p = 0);
   static void *newArray_RootcLcLTGoodRun(Long_t size, void *p);
   static void delete_RootcLcLTGoodRun(void *p);
   static void deleteArray_RootcLcLTGoodRun(void *p);
   static void destruct_RootcLcLTGoodRun(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TGoodRun*)
   {
      ::Root::TGoodRun *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::TGoodRun >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TGoodRun", ::Root::TGoodRun::Class_Version(), "../GoodRunsLists/TGoodRun.h", 18,
                  typeid(::Root::TGoodRun), DefineBehavior(ptr, ptr),
                  &::Root::TGoodRun::Dictionary, isa_proxy, 4,
                  sizeof(::Root::TGoodRun) );
      instance.SetNew(&new_RootcLcLTGoodRun);
      instance.SetNewArray(&newArray_RootcLcLTGoodRun);
      instance.SetDelete(&delete_RootcLcLTGoodRun);
      instance.SetDeleteArray(&deleteArray_RootcLcLTGoodRun);
      instance.SetDestructor(&destruct_RootcLcLTGoodRun);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TGoodRun*)
   {
      return GenerateInitInstanceLocal((::Root::TGoodRun*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TGoodRun*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTGoodRunsList_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLTGoodRunsList(void *p = 0);
   static void *newArray_RootcLcLTGoodRunsList(Long_t size, void *p);
   static void delete_RootcLcLTGoodRunsList(void *p);
   static void deleteArray_RootcLcLTGoodRunsList(void *p);
   static void destruct_RootcLcLTGoodRunsList(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TGoodRunsList*)
   {
      ::Root::TGoodRunsList *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::TGoodRunsList >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TGoodRunsList", ::Root::TGoodRunsList::Class_Version(), "../GoodRunsLists/TGoodRunsList.h", 21,
                  typeid(::Root::TGoodRunsList), DefineBehavior(ptr, ptr),
                  &::Root::TGoodRunsList::Dictionary, isa_proxy, 4,
                  sizeof(::Root::TGoodRunsList) );
      instance.SetNew(&new_RootcLcLTGoodRunsList);
      instance.SetNewArray(&newArray_RootcLcLTGoodRunsList);
      instance.SetDelete(&delete_RootcLcLTGoodRunsList);
      instance.SetDeleteArray(&deleteArray_RootcLcLTGoodRunsList);
      instance.SetDestructor(&destruct_RootcLcLTGoodRunsList);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TGoodRunsList*)
   {
      return GenerateInitInstanceLocal((::Root::TGoodRunsList*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TGoodRunsList*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void pairlEintcORootcLcLTGoodRungR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void pairlEintcORootcLcLTGoodRungR_Dictionary();
   static void *new_pairlEintcORootcLcLTGoodRungR(void *p = 0);
   static void *newArray_pairlEintcORootcLcLTGoodRungR(Long_t size, void *p);
   static void delete_pairlEintcORootcLcLTGoodRungR(void *p);
   static void deleteArray_pairlEintcORootcLcLTGoodRungR(void *p);
   static void destruct_pairlEintcORootcLcLTGoodRungR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const pair<int,Root::TGoodRun>*)
   {
      pair<int,Root::TGoodRun> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(pair<int,Root::TGoodRun>),0);
      static ::ROOT::TGenericClassInfo 
         instance("pair<int,Root::TGoodRun>", "/srv01/tau/hod/root/cint/cint/lib/prec_stl/utility", 17,
                  typeid(pair<int,Root::TGoodRun>), DefineBehavior(ptr, ptr),
                  0, &pairlEintcORootcLcLTGoodRungR_Dictionary, isa_proxy, 0,
                  sizeof(pair<int,Root::TGoodRun>) );
      instance.SetNew(&new_pairlEintcORootcLcLTGoodRungR);
      instance.SetNewArray(&newArray_pairlEintcORootcLcLTGoodRungR);
      instance.SetDelete(&delete_pairlEintcORootcLcLTGoodRungR);
      instance.SetDeleteArray(&deleteArray_pairlEintcORootcLcLTGoodRungR);
      instance.SetDestructor(&destruct_pairlEintcORootcLcLTGoodRungR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const pair<int,Root::TGoodRun>*)
   {
      return GenerateInitInstanceLocal((pair<int,Root::TGoodRun>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const pair<int,Root::TGoodRun>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void pairlEintcORootcLcLTGoodRungR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const pair<int,Root::TGoodRun>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator_Dictionary();
   static void *new_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p);
   static void deleteArray_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p);
   static void destruct_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)
   {
      ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator", "/srv01/tau/hod/root/cint/cint/lib/prec_stl/map", 103,
                  typeid(::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator), DefineBehavior(ptr, ptr),
                  0, &maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator) );
      instance.SetNew(&new_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator);
      instance.SetDelete(&delete_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)
   {
      return GenerateInitInstanceLocal((::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p);
   static void destruct_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)
   {
      ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator", "/srv01/tau/hod/root/cint/cint/lib/prec_stl/vector", 215,
                  typeid(::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator) );
      instance.SetNew(&new_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTGRLCollection_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLTGRLCollection(void *p = 0);
   static void *newArray_RootcLcLTGRLCollection(Long_t size, void *p);
   static void delete_RootcLcLTGRLCollection(void *p);
   static void deleteArray_RootcLcLTGRLCollection(void *p);
   static void destruct_RootcLcLTGRLCollection(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TGRLCollection*)
   {
      ::Root::TGRLCollection *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::TGRLCollection >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TGRLCollection", ::Root::TGRLCollection::Class_Version(), "../GoodRunsLists/TGRLCollection.h", 20,
                  typeid(::Root::TGRLCollection), DefineBehavior(ptr, ptr),
                  &::Root::TGRLCollection::Dictionary, isa_proxy, 4,
                  sizeof(::Root::TGRLCollection) );
      instance.SetNew(&new_RootcLcLTGRLCollection);
      instance.SetNewArray(&newArray_RootcLcLTGRLCollection);
      instance.SetDelete(&delete_RootcLcLTGRLCollection);
      instance.SetDeleteArray(&deleteArray_RootcLcLTGRLCollection);
      instance.SetDestructor(&destruct_RootcLcLTGRLCollection);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TGRLCollection*)
   {
      return GenerateInitInstanceLocal((::Root::TGRLCollection*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TGRLCollection*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator_Dictionary();
   static void *new_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p = 0);
   static void *newArray_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(Long_t size, void *p);
   static void delete_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p);
   static void deleteArray_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p);
   static void destruct_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)
   {
      ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator", "/srv01/tau/hod/root/cint/cint/lib/prec_stl/vector", 215,
                  typeid(::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator), DefineBehavior(ptr, ptr),
                  0, &vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator_Dictionary, isa_proxy, 0,
                  sizeof(::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator) );
      instance.SetNew(&new_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator);
      instance.SetNewArray(&newArray_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator);
      instance.SetDelete(&delete_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator);
      instance.SetDeleteArray(&deleteArray_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator);
      instance.SetDestructor(&destruct_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)
   {
      return GenerateInitInstanceLocal((::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTGoodRunsListWriter_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLTGoodRunsListWriter(void *p = 0);
   static void *newArray_RootcLcLTGoodRunsListWriter(Long_t size, void *p);
   static void delete_RootcLcLTGoodRunsListWriter(void *p);
   static void deleteArray_RootcLcLTGoodRunsListWriter(void *p);
   static void destruct_RootcLcLTGoodRunsListWriter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TGoodRunsListWriter*)
   {
      ::Root::TGoodRunsListWriter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::TGoodRunsListWriter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TGoodRunsListWriter", ::Root::TGoodRunsListWriter::Class_Version(), "./../GoodRunsLists/TGoodRunsListWriter.h", 35,
                  typeid(::Root::TGoodRunsListWriter), DefineBehavior(ptr, ptr),
                  &::Root::TGoodRunsListWriter::Dictionary, isa_proxy, 0,
                  sizeof(::Root::TGoodRunsListWriter) );
      instance.SetNew(&new_RootcLcLTGoodRunsListWriter);
      instance.SetNewArray(&newArray_RootcLcLTGoodRunsListWriter);
      instance.SetDelete(&delete_RootcLcLTGoodRunsListWriter);
      instance.SetDeleteArray(&deleteArray_RootcLcLTGoodRunsListWriter);
      instance.SetDestructor(&destruct_RootcLcLTGoodRunsListWriter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TGoodRunsListWriter*)
   {
      return GenerateInitInstanceLocal((::Root::TGoodRunsListWriter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TGoodRunsListWriter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void RootcLcLTGoodRunsListReader_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_RootcLcLTGoodRunsListReader(void *p = 0);
   static void *newArray_RootcLcLTGoodRunsListReader(Long_t size, void *p);
   static void delete_RootcLcLTGoodRunsListReader(void *p);
   static void deleteArray_RootcLcLTGoodRunsListReader(void *p);
   static void destruct_RootcLcLTGoodRunsListReader(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Root::TGoodRunsListReader*)
   {
      ::Root::TGoodRunsListReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Root::TGoodRunsListReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Root::TGoodRunsListReader", ::Root::TGoodRunsListReader::Class_Version(), "./../GoodRunsLists/TGoodRunsListReader.h", 32,
                  typeid(::Root::TGoodRunsListReader), DefineBehavior(ptr, ptr),
                  &::Root::TGoodRunsListReader::Dictionary, isa_proxy, 0,
                  sizeof(::Root::TGoodRunsListReader) );
      instance.SetNew(&new_RootcLcLTGoodRunsListReader);
      instance.SetNewArray(&newArray_RootcLcLTGoodRunsListReader);
      instance.SetDelete(&delete_RootcLcLTGoodRunsListReader);
      instance.SetDeleteArray(&deleteArray_RootcLcLTGoodRunsListReader);
      instance.SetDestructor(&destruct_RootcLcLTGoodRunsListReader);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Root::TGoodRunsListReader*)
   {
      return GenerateInitInstanceLocal((::Root::TGoodRunsListReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Root::TGoodRunsListReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace DQ {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void DQ_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("DQ", 0 /*version*/, "./../GoodRunsLists/DQHelperFunctions.h", 5,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &DQ_Dictionary, 0);
         return &instance;
      }
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void DQ_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

      namespace Root {
//______________________________________________________________________________
TClass *RegularFormula::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RegularFormula::Class_Name()
{
   return "Root::RegularFormula";
}

//______________________________________________________________________________
const char *RegularFormula::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::RegularFormula*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RegularFormula::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::RegularFormula*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RegularFormula::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::RegularFormula*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RegularFormula::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::RegularFormula*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
TClass *TLumiBlockRange::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TLumiBlockRange::Class_Name()
{
   return "Root::TLumiBlockRange";
}

//______________________________________________________________________________
const char *TLumiBlockRange::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TLumiBlockRange*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TLumiBlockRange::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TLumiBlockRange*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TLumiBlockRange::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TLumiBlockRange*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TLumiBlockRange::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TLumiBlockRange*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
TClass *TGoodRun::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGoodRun::Class_Name()
{
   return "Root::TGoodRun";
}

//______________________________________________________________________________
const char *TGoodRun::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRun*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGoodRun::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRun*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGoodRun::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRun*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGoodRun::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRun*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
TClass *TGoodRunsList::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGoodRunsList::Class_Name()
{
   return "Root::TGoodRunsList";
}

//______________________________________________________________________________
const char *TGoodRunsList::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsList*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGoodRunsList::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsList*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGoodRunsList::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsList*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGoodRunsList::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsList*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
TClass *TGRLCollection::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGRLCollection::Class_Name()
{
   return "Root::TGRLCollection";
}

//______________________________________________________________________________
const char *TGRLCollection::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGRLCollection*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGRLCollection::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGRLCollection*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGRLCollection::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGRLCollection*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGRLCollection::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGRLCollection*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
TClass *TGoodRunsListWriter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGoodRunsListWriter::Class_Name()
{
   return "Root::TGoodRunsListWriter";
}

//______________________________________________________________________________
const char *TGoodRunsListWriter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListWriter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGoodRunsListWriter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListWriter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGoodRunsListWriter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListWriter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGoodRunsListWriter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListWriter*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
TClass *TGoodRunsListReader::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TGoodRunsListReader::Class_Name()
{
   return "Root::TGoodRunsListReader";
}

//______________________________________________________________________________
const char *TGoodRunsListReader::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TGoodRunsListReader::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TGoodRunsListReader::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TGoodRunsListReader::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Root::TGoodRunsListReader*)0x0)->GetClass();
   return fgIsA;
}

} // namespace Root
      namespace Root {
//______________________________________________________________________________
void RegularFormula::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::RegularFormula.

   TFormula::Streamer(R__b);
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void RegularFormula::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::RegularFormula.
      TClass *R__cl = ::Root::RegularFormula::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_expr", &m_expr);
      m_expr.ShowMembers(R__insp, strcat(R__parent,"m_expr.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_par", (void*)&m_par);
      ::ROOT::GenericShowMembers("list<TString>", (void*)&m_par, R__insp, strcat(R__parent,"m_par."),false);
      R__parent[R__ncp] = 0;
      TFormula::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLRegularFormula(void *p) {
      return  p ? new(p) ::Root::RegularFormula : new ::Root::RegularFormula;
   }
   static void *newArray_RootcLcLRegularFormula(Long_t nElements, void *p) {
      return p ? new(p) ::Root::RegularFormula[nElements] : new ::Root::RegularFormula[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLRegularFormula(void *p) {
      delete ((::Root::RegularFormula*)p);
   }
   static void deleteArray_RootcLcLRegularFormula(void *p) {
      delete [] ((::Root::RegularFormula*)p);
   }
   static void destruct_RootcLcLRegularFormula(void *p) {
      typedef ::Root::RegularFormula current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::RegularFormula

      namespace Root {
//______________________________________________________________________________
void TGoodRunsListReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::TGoodRunsListReader.

   TObject::Streamer(R__b);
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void TGoodRunsListReader::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::TGoodRunsListReader.
      TClass *R__cl = ::Root::TGoodRunsListReader::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_xmlstring", &m_xmlstring);
      m_xmlstring.ShowMembers(R__insp, strcat(R__parent,"m_xmlstring.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_dataCardName", &m_dataCardName);
      m_dataCardName.ShowMembers(R__insp, strcat(R__parent,"m_dataCardName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_dataCardList", (void*)&m_dataCardList);
      ::ROOT::GenericShowMembers("vector<TString>", (void*)&m_dataCardList, R__insp, strcat(R__parent,"m_dataCardList."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_xmlstringList", (void*)&m_xmlstringList);
      ::ROOT::GenericShowMembers("vector<TString>", (void*)&m_xmlstringList, R__insp, strcat(R__parent,"m_xmlstringList."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_logger", (void*)&m_logger);
      ::ROOT::GenericShowMembers("Root::TMsgLogger", (void*)&m_logger, R__insp, strcat(R__parent,"m_logger."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_grlvec", &m_grlvec);
      m_grlvec.ShowMembers(R__insp, strcat(R__parent,"m_grlvec.")); R__parent[R__ncp] = 0;
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTGoodRunsListReader(void *p) {
      return  p ? new(p) ::Root::TGoodRunsListReader : new ::Root::TGoodRunsListReader;
   }
   static void *newArray_RootcLcLTGoodRunsListReader(Long_t nElements, void *p) {
      return p ? new(p) ::Root::TGoodRunsListReader[nElements] : new ::Root::TGoodRunsListReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTGoodRunsListReader(void *p) {
      delete ((::Root::TGoodRunsListReader*)p);
   }
   static void deleteArray_RootcLcLTGoodRunsListReader(void *p) {
      delete [] ((::Root::TGoodRunsListReader*)p);
   }
   static void destruct_RootcLcLTGoodRunsListReader(void *p) {
      typedef ::Root::TGoodRunsListReader current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TGoodRunsListReader

      namespace Root {
//______________________________________________________________________________
void TGoodRunsListWriter::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::TGoodRunsListWriter.

   TObject::Streamer(R__b);
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void TGoodRunsListWriter::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::TGoodRunsListWriter.
      TClass *R__cl = ::Root::TGoodRunsListWriter::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_grlvec", &m_grlvec);
      m_grlvec.ShowMembers(R__insp, strcat(R__parent,"m_grlvec.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_grl", &m_grl);
      m_grl.ShowMembers(R__insp, strcat(R__parent,"m_grl.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_xmlstringVec", (void*)&m_xmlstringVec);
      ::ROOT::GenericShowMembers("vector<TString>", (void*)&m_xmlstringVec, R__insp, strcat(R__parent,"m_xmlstringVec."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_xmlstring", &m_xmlstring);
      m_xmlstring.ShowMembers(R__insp, strcat(R__parent,"m_xmlstring.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_dataCardName", &m_dataCardName);
      m_dataCardName.ShowMembers(R__insp, strcat(R__parent,"m_dataCardName.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_prefix", &m_prefix);
      m_prefix.ShowMembers(R__insp, strcat(R__parent,"m_prefix.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_logger", (void*)&m_logger);
      ::ROOT::GenericShowMembers("Root::TMsgLogger", (void*)&m_logger, R__insp, strcat(R__parent,"m_logger."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_mergegrls", &m_mergegrls);
      R__insp.Inspect(R__cl, R__parent, "m_individuals", &m_individuals);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTGoodRunsListWriter(void *p) {
      return  p ? new(p) ::Root::TGoodRunsListWriter : new ::Root::TGoodRunsListWriter;
   }
   static void *newArray_RootcLcLTGoodRunsListWriter(Long_t nElements, void *p) {
      return p ? new(p) ::Root::TGoodRunsListWriter[nElements] : new ::Root::TGoodRunsListWriter[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTGoodRunsListWriter(void *p) {
      delete ((::Root::TGoodRunsListWriter*)p);
   }
   static void deleteArray_RootcLcLTGoodRunsListWriter(void *p) {
      delete [] ((::Root::TGoodRunsListWriter*)p);
   }
   static void destruct_RootcLcLTGoodRunsListWriter(void *p) {
      typedef ::Root::TGoodRunsListWriter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TGoodRunsListWriter

      namespace Root {
//______________________________________________________________________________
void TLumiBlockRange::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::TLumiBlockRange.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Root::TLumiBlockRange::Class(),this);
   } else {
      R__b.WriteClassBuffer(Root::TLumiBlockRange::Class(),this);
   }
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void TLumiBlockRange::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::TLumiBlockRange.
      TClass *R__cl = ::Root::TLumiBlockRange::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_begin", &m_begin);
      R__insp.Inspect(R__cl, R__parent, "m_end", &m_end);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTLumiBlockRange(void *p) {
      return  p ? new(p) ::Root::TLumiBlockRange : new ::Root::TLumiBlockRange;
   }
   static void *newArray_RootcLcLTLumiBlockRange(Long_t nElements, void *p) {
      return p ? new(p) ::Root::TLumiBlockRange[nElements] : new ::Root::TLumiBlockRange[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTLumiBlockRange(void *p) {
      delete ((::Root::TLumiBlockRange*)p);
   }
   static void deleteArray_RootcLcLTLumiBlockRange(void *p) {
      delete [] ((::Root::TLumiBlockRange*)p);
   }
   static void destruct_RootcLcLTLumiBlockRange(void *p) {
      typedef ::Root::TLumiBlockRange current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TLumiBlockRange

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator : new ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator;
   }
   static void *newArray_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator[nElements] : new ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p) {
      delete ((::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)p);
   }
   static void deleteArray_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)p);
   }
   static void destruct_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void *p) {
      typedef ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator

      namespace Root {
//______________________________________________________________________________
void TGoodRun::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::TGoodRun.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Root::TGoodRun::Class(),this);
   } else {
      R__b.WriteClassBuffer(Root::TGoodRun::Class(),this);
   }
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void TGoodRun::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::TGoodRun.
      TClass *R__cl = ::Root::TGoodRun::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_runnr", &m_runnr);
      ::ROOT::GenericShowMembers("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >", ( ::vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > *) (this ), R__insp, R__parent, false);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTGoodRun(void *p) {
      return  p ? new(p) ::Root::TGoodRun : new ::Root::TGoodRun;
   }
   static void *newArray_RootcLcLTGoodRun(Long_t nElements, void *p) {
      return p ? new(p) ::Root::TGoodRun[nElements] : new ::Root::TGoodRun[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTGoodRun(void *p) {
      delete ((::Root::TGoodRun*)p);
   }
   static void deleteArray_RootcLcLTGoodRun(void *p) {
      delete [] ((::Root::TGoodRun*)p);
   }
   static void destruct_RootcLcLTGoodRun(void *p) {
      typedef ::Root::TGoodRun current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TGoodRun

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator : new ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator;
   }
   static void *newArray_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator[nElements] : new ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p) {
      delete ((::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)p);
   }
   static void deleteArray_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)p);
   }
   static void destruct_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void *p) {
      typedef ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator

namespace ROOT {
   // Wrappers around operator new
   static void *new_pairlEintcORootcLcLTGoodRungR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<int,Root::TGoodRun> : new pair<int,Root::TGoodRun>;
   }
   static void *newArray_pairlEintcORootcLcLTGoodRungR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) pair<int,Root::TGoodRun>[nElements] : new pair<int,Root::TGoodRun>[nElements];
   }
   // Wrapper around operator delete
   static void delete_pairlEintcORootcLcLTGoodRungR(void *p) {
      delete ((pair<int,Root::TGoodRun>*)p);
   }
   static void deleteArray_pairlEintcORootcLcLTGoodRungR(void *p) {
      delete [] ((pair<int,Root::TGoodRun>*)p);
   }
   static void destruct_pairlEintcORootcLcLTGoodRungR(void *p) {
      typedef pair<int,Root::TGoodRun> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class pair<int,Root::TGoodRun>

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator : new ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator;
   }
   static void *newArray_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator[nElements] : new ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p) {
      delete ((::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)p);
   }
   static void deleteArray_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p) {
      delete [] ((::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)p);
   }
   static void destruct_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void *p) {
      typedef ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator

      namespace Root {
//______________________________________________________________________________
void TGoodRunsList::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::TGoodRunsList.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Root::TGoodRunsList::Class(),this);
   } else {
      R__b.WriteClassBuffer(Root::TGoodRunsList::Class(),this);
   }
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void TGoodRunsList::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::TGoodRunsList.
      TClass *R__cl = ::Root::TGoodRunsList::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_version", &m_version);
      m_version.ShowMembers(R__insp, strcat(R__parent,"m_version.")); R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_metadata", (void*)&m_metadata);
      ::ROOT::GenericShowMembers("map<TString,TString>", (void*)&m_metadata, R__insp, strcat(R__parent,"m_metadata."),false);
      R__parent[R__ncp] = 0;
      R__insp.Inspect(R__cl, R__parent, "m_checkGRLInfo", &m_checkGRLInfo);
      R__insp.Inspect(R__cl, R__parent, "m_hasRun", &m_hasRun);
      R__insp.Inspect(R__cl, R__parent, "m_hasLB", &m_hasLB);
      R__insp.Inspect(R__cl, R__parent, "m_prevRun", &m_prevRun);
      R__insp.Inspect(R__cl, R__parent, "m_prevLB", &m_prevLB);
      ::ROOT::GenericShowMembers("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >", ( ::map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > *) (this ), R__insp, R__parent, false);
      TNamed::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTGoodRunsList(void *p) {
      return  p ? new(p) ::Root::TGoodRunsList : new ::Root::TGoodRunsList;
   }
   static void *newArray_RootcLcLTGoodRunsList(Long_t nElements, void *p) {
      return p ? new(p) ::Root::TGoodRunsList[nElements] : new ::Root::TGoodRunsList[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTGoodRunsList(void *p) {
      delete ((::Root::TGoodRunsList*)p);
   }
   static void deleteArray_RootcLcLTGoodRunsList(void *p) {
      delete [] ((::Root::TGoodRunsList*)p);
   }
   static void destruct_RootcLcLTGoodRunsList(void *p) {
      typedef ::Root::TGoodRunsList current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TGoodRunsList

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator : new ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator;
   }
   static void *newArray_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator[nElements] : new ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p) {
      delete ((::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)p);
   }
   static void deleteArray_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p) {
      delete [] ((::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)p);
   }
   static void destruct_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void *p) {
      typedef ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator

      namespace Root {
//______________________________________________________________________________
void TGRLCollection::Streamer(TBuffer &R__b)
{
   // Stream an object of class Root::TGRLCollection.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Root::TGRLCollection::Class(),this);
   } else {
      R__b.WriteClassBuffer(Root::TGRLCollection::Class(),this);
   }
}

} // namespace Root
//______________________________________________________________________________
      namespace Root {
void TGRLCollection::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Root::TGRLCollection.
      TClass *R__cl = ::Root::TGRLCollection::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "m_checkGRLInfo", &m_checkGRLInfo);
      ::ROOT::GenericShowMembers("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >", ( ::vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > *) (this ), R__insp, R__parent, false);
      TObject::ShowMembers(R__insp, R__parent);
}

} // namespace Root
namespace ROOT {
   // Wrappers around operator new
   static void *new_RootcLcLTGRLCollection(void *p) {
      return  p ? new(p) ::Root::TGRLCollection : new ::Root::TGRLCollection;
   }
   static void *newArray_RootcLcLTGRLCollection(Long_t nElements, void *p) {
      return p ? new(p) ::Root::TGRLCollection[nElements] : new ::Root::TGRLCollection[nElements];
   }
   // Wrapper around operator delete
   static void delete_RootcLcLTGRLCollection(void *p) {
      delete ((::Root::TGRLCollection*)p);
   }
   static void deleteArray_RootcLcLTGRLCollection(void *p) {
      delete [] ((::Root::TGRLCollection*)p);
   }
   static void destruct_RootcLcLTGRLCollection(void *p) {
      typedef ::Root::TGRLCollection current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Root::TGRLCollection

namespace ROOT {
   void maplETStringcOTStringgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplETStringcOTStringgR_Dictionary();
   static void *new_maplETStringcOTStringgR(void *p = 0);
   static void *newArray_maplETStringcOTStringgR(Long_t size, void *p);
   static void delete_maplETStringcOTStringgR(void *p);
   static void deleteArray_maplETStringcOTStringgR(void *p);
   static void destruct_maplETStringcOTStringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TString>*)
   {
      map<TString,TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TString>", -2, "/srv01/tau/hod/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TString>), DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTStringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TString>) );
      instance.SetNew(&new_maplETStringcOTStringgR);
      instance.SetNewArray(&newArray_maplETStringcOTStringgR);
      instance.SetDelete(&delete_maplETStringcOTStringgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTStringgR);
      instance.SetDestructor(&destruct_maplETStringcOTStringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<TString,TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<TString,TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplETStringcOTStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TString> : new map<TString,TString>;
   }
   static void *newArray_maplETStringcOTStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TString>[nElements] : new map<TString,TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTStringgR(void *p) {
      delete ((map<TString,TString>*)p);
   }
   static void deleteArray_maplETStringcOTStringgR(void *p) {
      delete [] ((map<TString,TString>*)p);
   }
   static void destruct_maplETStringcOTStringgR(void *p) {
      typedef map<TString,TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<TString,TString>

namespace ROOT {
   void maplEintcORootcLcLTGoodRungR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void maplEintcORootcLcLTGoodRungR_Dictionary();
   static void *new_maplEintcORootcLcLTGoodRungR(void *p = 0);
   static void *newArray_maplEintcORootcLcLTGoodRungR(Long_t size, void *p);
   static void delete_maplEintcORootcLcLTGoodRungR(void *p);
   static void deleteArray_maplEintcORootcLcLTGoodRungR(void *p);
   static void destruct_maplEintcORootcLcLTGoodRungR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const map<int,Root::TGoodRun>*)
   {
      map<int,Root::TGoodRun> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,Root::TGoodRun>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,Root::TGoodRun>", -2, "/srv01/tau/hod/root/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,Root::TGoodRun>), DefineBehavior(ptr, ptr),
                  0, &maplEintcORootcLcLTGoodRungR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,Root::TGoodRun>) );
      instance.SetNew(&new_maplEintcORootcLcLTGoodRungR);
      instance.SetNewArray(&newArray_maplEintcORootcLcLTGoodRungR);
      instance.SetDelete(&delete_maplEintcORootcLcLTGoodRungR);
      instance.SetDeleteArray(&deleteArray_maplEintcORootcLcLTGoodRungR);
      instance.SetDestructor(&destruct_maplEintcORootcLcLTGoodRungR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::MapInsert< map<int,Root::TGoodRun> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,Root::TGoodRun>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcORootcLcLTGoodRungR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const map<int,Root::TGoodRun>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_maplEintcORootcLcLTGoodRungR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,Root::TGoodRun> : new map<int,Root::TGoodRun>;
   }
   static void *newArray_maplEintcORootcLcLTGoodRungR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,Root::TGoodRun>[nElements] : new map<int,Root::TGoodRun>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcORootcLcLTGoodRungR(void *p) {
      delete ((map<int,Root::TGoodRun>*)p);
   }
   static void deleteArray_maplEintcORootcLcLTGoodRungR(void *p) {
      delete [] ((map<int,Root::TGoodRun>*)p);
   }
   static void destruct_maplEintcORootcLcLTGoodRungR(void *p) {
      typedef map<int,Root::TGoodRun> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class map<int,Root::TGoodRun>

namespace ROOT {
   void vectorlERootcLcLTGoodRungR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlERootcLcLTGoodRungR_Dictionary();
   static void *new_vectorlERootcLcLTGoodRungR(void *p = 0);
   static void *newArray_vectorlERootcLcLTGoodRungR(Long_t size, void *p);
   static void delete_vectorlERootcLcLTGoodRungR(void *p);
   static void deleteArray_vectorlERootcLcLTGoodRungR(void *p);
   static void destruct_vectorlERootcLcLTGoodRungR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Root::TGoodRun>*)
   {
      vector<Root::TGoodRun> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Root::TGoodRun>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Root::TGoodRun>", -2, "/srv01/tau/hod/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Root::TGoodRun>), DefineBehavior(ptr, ptr),
                  0, &vectorlERootcLcLTGoodRungR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Root::TGoodRun>) );
      instance.SetNew(&new_vectorlERootcLcLTGoodRungR);
      instance.SetNewArray(&newArray_vectorlERootcLcLTGoodRungR);
      instance.SetDelete(&delete_vectorlERootcLcLTGoodRungR);
      instance.SetDeleteArray(&deleteArray_vectorlERootcLcLTGoodRungR);
      instance.SetDestructor(&destruct_vectorlERootcLcLTGoodRungR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Root::TGoodRun> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Root::TGoodRun>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootcLcLTGoodRungR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Root::TGoodRun>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERootcLcLTGoodRungR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Root::TGoodRun> : new vector<Root::TGoodRun>;
   }
   static void *newArray_vectorlERootcLcLTGoodRungR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Root::TGoodRun>[nElements] : new vector<Root::TGoodRun>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootcLcLTGoodRungR(void *p) {
      delete ((vector<Root::TGoodRun>*)p);
   }
   static void deleteArray_vectorlERootcLcLTGoodRungR(void *p) {
      delete [] ((vector<Root::TGoodRun>*)p);
   }
   static void destruct_vectorlERootcLcLTGoodRungR(void *p) {
      typedef vector<Root::TGoodRun> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Root::TGoodRun>

namespace ROOT {
   void vectorlERootcLcLTGoodRunsListgR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlERootcLcLTGoodRunsListgR_Dictionary();
   static void *new_vectorlERootcLcLTGoodRunsListgR(void *p = 0);
   static void *newArray_vectorlERootcLcLTGoodRunsListgR(Long_t size, void *p);
   static void delete_vectorlERootcLcLTGoodRunsListgR(void *p);
   static void deleteArray_vectorlERootcLcLTGoodRunsListgR(void *p);
   static void destruct_vectorlERootcLcLTGoodRunsListgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Root::TGoodRunsList>*)
   {
      vector<Root::TGoodRunsList> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Root::TGoodRunsList>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Root::TGoodRunsList>", -2, "/srv01/tau/hod/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Root::TGoodRunsList>), DefineBehavior(ptr, ptr),
                  0, &vectorlERootcLcLTGoodRunsListgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Root::TGoodRunsList>) );
      instance.SetNew(&new_vectorlERootcLcLTGoodRunsListgR);
      instance.SetNewArray(&newArray_vectorlERootcLcLTGoodRunsListgR);
      instance.SetDelete(&delete_vectorlERootcLcLTGoodRunsListgR);
      instance.SetDeleteArray(&deleteArray_vectorlERootcLcLTGoodRunsListgR);
      instance.SetDestructor(&destruct_vectorlERootcLcLTGoodRunsListgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Root::TGoodRunsList> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Root::TGoodRunsList>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootcLcLTGoodRunsListgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Root::TGoodRunsList>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERootcLcLTGoodRunsListgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Root::TGoodRunsList> : new vector<Root::TGoodRunsList>;
   }
   static void *newArray_vectorlERootcLcLTGoodRunsListgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Root::TGoodRunsList>[nElements] : new vector<Root::TGoodRunsList>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootcLcLTGoodRunsListgR(void *p) {
      delete ((vector<Root::TGoodRunsList>*)p);
   }
   static void deleteArray_vectorlERootcLcLTGoodRunsListgR(void *p) {
      delete [] ((vector<Root::TGoodRunsList>*)p);
   }
   static void destruct_vectorlERootcLcLTGoodRunsListgR(void *p) {
      typedef vector<Root::TGoodRunsList> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Root::TGoodRunsList>

namespace ROOT {
   void vectorlERootcLcLTLumiBlockRangegR_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void vectorlERootcLcLTLumiBlockRangegR_Dictionary();
   static void *new_vectorlERootcLcLTLumiBlockRangegR(void *p = 0);
   static void *newArray_vectorlERootcLcLTLumiBlockRangegR(Long_t size, void *p);
   static void delete_vectorlERootcLcLTLumiBlockRangegR(void *p);
   static void deleteArray_vectorlERootcLcLTLumiBlockRangegR(void *p);
   static void destruct_vectorlERootcLcLTLumiBlockRangegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Root::TLumiBlockRange>*)
   {
      vector<Root::TLumiBlockRange> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Root::TLumiBlockRange>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Root::TLumiBlockRange>", -2, "/srv01/tau/hod/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Root::TLumiBlockRange>), DefineBehavior(ptr, ptr),
                  0, &vectorlERootcLcLTLumiBlockRangegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Root::TLumiBlockRange>) );
      instance.SetNew(&new_vectorlERootcLcLTLumiBlockRangegR);
      instance.SetNewArray(&newArray_vectorlERootcLcLTLumiBlockRangegR);
      instance.SetDelete(&delete_vectorlERootcLcLTLumiBlockRangegR);
      instance.SetDeleteArray(&deleteArray_vectorlERootcLcLTLumiBlockRangegR);
      instance.SetDestructor(&destruct_vectorlERootcLcLTLumiBlockRangegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Root::TLumiBlockRange> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Root::TLumiBlockRange>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlERootcLcLTLumiBlockRangegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Root::TLumiBlockRange>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlERootcLcLTLumiBlockRangegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Root::TLumiBlockRange> : new vector<Root::TLumiBlockRange>;
   }
   static void *newArray_vectorlERootcLcLTLumiBlockRangegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Root::TLumiBlockRange>[nElements] : new vector<Root::TLumiBlockRange>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlERootcLcLTLumiBlockRangegR(void *p) {
      delete ((vector<Root::TLumiBlockRange>*)p);
   }
   static void deleteArray_vectorlERootcLcLTLumiBlockRangegR(void *p) {
      delete [] ((vector<Root::TLumiBlockRange>*)p);
   }
   static void destruct_vectorlERootcLcLTLumiBlockRangegR(void *p) {
      typedef vector<Root::TLumiBlockRange> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Root::TLumiBlockRange>

/********************************************************
* ../Root/TGoodRunsListsCint.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTGoodRunsListsCint();

extern "C" void G__set_cpp_environmentTGoodRunsListsCint() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("../GoodRunsLists/TUniqueGRLString.h");
  G__add_compiledheader("../GoodRunsLists/RegularFormula.h");
  G__add_compiledheader("../GoodRunsLists/StrUtil.h");
  G__add_compiledheader("../GoodRunsLists/TMsgLogger.h");
  G__add_compiledheader("../GoodRunsLists/TGoodRunsListWriter.h");
  G__add_compiledheader("../GoodRunsLists/TGoodRunsListReader.h");
  G__add_compiledheader("../GoodRunsLists/TLumiBlockRange.h");
  G__add_compiledheader("../GoodRunsLists/TGoodRun.h");
  G__add_compiledheader("../GoodRunsLists/TGoodRunsList.h");
  G__add_compiledheader("../GoodRunsLists/TGRLCollection.h");
  G__add_compiledheader("../GoodRunsLists/DQHelperFunctions.h");
  G__cpp_reset_tagtableTGoodRunsListsCint();
}
#include <new>
extern "C" int G__cpp_dllrevTGoodRunsListsCint() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Root */

/* Root::RegularFormula */
static int G__TGoodRunsListsCint_197_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::RegularFormula* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::RegularFormula[n];
     } else {
       p = new((void*) gvp) Root::RegularFormula[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::RegularFormula;
     } else {
       p = new((void*) gvp) Root::RegularFormula;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::RegularFormula* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::RegularFormula((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) Root::RegularFormula((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::RegularFormula* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::RegularFormula(*(Root::RegularFormula*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::RegularFormula(*(Root::RegularFormula*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::RegularFormula& obj = ((Root::RegularFormula*) G__getstructoffset())->operator=(*(Root::RegularFormula*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Root::RegularFormula*) G__getstructoffset())->setFormula((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Root::RegularFormula*) G__getstructoffset())->getNPars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const list<TString>& obj = ((const Root::RegularFormula*) G__getstructoffset())->getParNames();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::RegularFormula::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::RegularFormula::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::RegularFormula::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::RegularFormula::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::RegularFormula*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::RegularFormula::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::RegularFormula::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::RegularFormula::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_197_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::RegularFormula::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::RegularFormula G__TRootcLcLRegularFormula;
static int G__TGoodRunsListsCint_197_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::RegularFormula*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::RegularFormula*) (soff+(sizeof(Root::RegularFormula)*i)))->~G__TRootcLcLRegularFormula();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::RegularFormula*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::RegularFormula*) (soff))->~G__TRootcLcLRegularFormula();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TLumiBlockRange */
static int G__TGoodRunsListsCint_477_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TLumiBlockRange* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TLumiBlockRange[n];
     } else {
       p = new((void*) gvp) Root::TLumiBlockRange[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TLumiBlockRange;
     } else {
       p = new((void*) gvp) Root::TLumiBlockRange;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TLumiBlockRange* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TLumiBlockRange(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
     } else {
       p = new((void*) gvp) Root::TLumiBlockRange(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TLumiBlockRange(*(Int_t*) G__Intref(&libp->para[0]));
     } else {
       p = new((void*) gvp) Root::TLumiBlockRange(*(Int_t*) G__Intref(&libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TLumiBlockRange* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TLumiBlockRange(*(Root::TLumiBlockRange*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::TLumiBlockRange(*(Root::TLumiBlockRange*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TLumiBlockRange& obj = ((Root::TLumiBlockRange*) G__getstructoffset())->operator=(*(Root::TLumiBlockRange*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TLumiBlockRange* pobj;
         const Root::TLumiBlockRange xobj = ((const Root::TLumiBlockRange*) G__getstructoffset())->GetOverlapWith(*(Root::TLumiBlockRange*) libp->para[0].ref);
         pobj = new Root::TLumiBlockRange(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange>* pobj;
         const vector<Root::TLumiBlockRange> xobj = ((const Root::TLumiBlockRange*) G__getstructoffset())->GetPartOnlyIn(*(Root::TLumiBlockRange*) libp->para[0].ref);
         pobj = new vector<Root::TLumiBlockRange>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange>* pobj;
         const vector<Root::TLumiBlockRange> xobj = ((const Root::TLumiBlockRange*) G__getstructoffset())->GetPartNotIn(*(Root::TLumiBlockRange*) libp->para[0].ref);
         pobj = new vector<Root::TLumiBlockRange>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TLumiBlockRange*) G__getstructoffset())->Contains(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Root::TLumiBlockRange*) G__getstructoffset())->Begin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Root::TLumiBlockRange*) G__getstructoffset())->End());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TLumiBlockRange*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TLumiBlockRange*) G__getstructoffset())->SetBegin(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TLumiBlockRange*) G__getstructoffset())->SetEnd(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Root::TLumiBlockRange*) G__getstructoffset())->Summary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::TLumiBlockRange::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TLumiBlockRange::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::TLumiBlockRange::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::TLumiBlockRange::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TLumiBlockRange*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TLumiBlockRange::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TLumiBlockRange::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TLumiBlockRange::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_477_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TLumiBlockRange::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TLumiBlockRange G__TRootcLcLTLumiBlockRange;
static int G__TGoodRunsListsCint_477_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TLumiBlockRange*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TLumiBlockRange*) (soff+(sizeof(Root::TLumiBlockRange)*i)))->~G__TRootcLcLTLumiBlockRange();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TLumiBlockRange*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TLumiBlockRange*) (soff))->~G__TRootcLcLTLumiBlockRange();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > */
static int G__TGoodRunsListsCint_479_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TLumiBlockRange& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->at((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->begin();
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->end();
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->rbegin();
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->rend();
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->resize((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->resize((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]), *((Root::TLumiBlockRange*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TLumiBlockRange& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->operator[]((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >[n];
     } else {
       p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >;
     } else {
       p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]), *(Root::TLumiBlockRange*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]), *(Root::TLumiBlockRange*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator*) G__int(libp->para[0])), *((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator*) G__int(libp->para[0])), *((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->operator=(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->reserve((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TLumiBlockRange& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TLumiBlockRange& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->push_back(*(Root::TLumiBlockRange*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->swap(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->insert(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__int(libp->para[0])), *(Root::TLumiBlockRange*) libp->para[1].ref);
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->insert(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__int(libp->para[0])), *((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator*) G__int(libp->para[1]))
, *((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->insert(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__int(libp->para[0])), (vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type) G__int(libp->para[1])
, *(Root::TLumiBlockRange*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->erase(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->erase(*((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__int(libp->para[0])), *((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_479_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > G__TvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR;
static int G__TGoodRunsListsCint_479_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) (soff+(sizeof(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >)*i)))->~G__TvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*) (soff))->~G__TvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator */
static int G__TGoodRunsListsCint_480_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator;
     } else {
       p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(libp->para[0].ref ? *(const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer*) libp->para[0].ref : *(const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(libp->para[0].ref ? *(const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer*) libp->para[0].ref : *(const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::reference obj = ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::reference obj = ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator[](*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator+=(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator+(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator& obj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator-=(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator-(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer& obj = ((const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_480_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) G__getstructoffset())->operator=(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) libp->para[0].ref);
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TGoodRunsListsCint_480_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(*(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator G__TvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator;
static int G__TGoodRunsListsCint_480_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) (soff+(sizeof(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator)*i)))->~G__TvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*) (soff))->~G__TvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TGoodRun */
static int G__TGoodRunsListsCint_482_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRun[n];
     } else {
       p = new((void*) gvp) Root::TGoodRun[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRun;
     } else {
       p = new((void*) gvp) Root::TGoodRun;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TGoodRun(*(Int_t*) G__Intref(&libp->para[0]));
   } else {
     p = new((void*) gvp) Root::TGoodRun(*(Int_t*) G__Intref(&libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRun* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TGoodRun(*(Root::TGoodRun*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::TGoodRun(*(Root::TGoodRun*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun& obj = ((Root::TGoodRun*) G__getstructoffset())->operator=(*(Root::TGoodRun*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun* pobj;
         const Root::TGoodRun xobj = ((const Root::TGoodRun*) G__getstructoffset())->GetOverlapWith(*(Root::TGoodRun*) libp->para[0].ref);
         pobj = new Root::TGoodRun(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun* pobj;
         const Root::TGoodRun xobj = ((const Root::TGoodRun*) G__getstructoffset())->GetSumWith(*(Root::TGoodRun*) libp->para[0].ref);
         pobj = new Root::TGoodRun(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun* pobj;
         const Root::TGoodRun xobj = ((const Root::TGoodRun*) G__getstructoffset())->GetPartOnlyIn(*(Root::TGoodRun*) libp->para[0].ref);
         pobj = new Root::TGoodRun(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun* pobj;
         const Root::TGoodRun xobj = ((const Root::TGoodRun*) G__getstructoffset())->GetPartNotIn(*(Root::TGoodRun*) libp->para[0].ref);
         pobj = new Root::TGoodRun(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRun*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRun*) G__getstructoffset())->HasLB(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator* pobj;
         vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator xobj = ((Root::TGoodRun*) G__getstructoffset())->Find(*(Int_t*) G__Intref(&libp->para[0]));
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator* pobj;
         const vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator xobj = ((const Root::TGoodRun*) G__getstructoffset())->Find(*(Int_t*) G__Intref(&libp->para[0]));
         pobj = new vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const Root::TGoodRun*) G__getstructoffset())->GetRunNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRun*) G__getstructoffset())->SetRunNumber(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Root::TGoodRun*) G__getstructoffset())->Summary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRun*) G__getstructoffset())->Sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRun*) G__getstructoffset())->Compress();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRun*) G__getstructoffset())->AddLB(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::TGoodRun::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRun::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::TGoodRun::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::TGoodRun::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRun*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRun::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRun::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRun::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_482_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRun::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TGoodRun G__TRootcLcLTGoodRun;
static int G__TGoodRunsListsCint_482_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TGoodRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TGoodRun*) (soff+(sizeof(Root::TGoodRun)*i)))->~G__TRootcLcLTGoodRun();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TGoodRun*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TGoodRun*) (soff))->~G__TRootcLcLTGoodRun();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TGoodRunsList */
static int G__TGoodRunsListsCint_484_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsList* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsList[n];
     } else {
       p = new((void*) gvp) Root::TGoodRunsList[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsList;
     } else {
       p = new((void*) gvp) Root::TGoodRunsList;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TGoodRunsList((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) Root::TGoodRunsList((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsList* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TGoodRunsList(*(Root::TGoodRunsList*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::TGoodRunsList(*(Root::TGoodRunsList*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList& obj = ((Root::TGoodRunsList*) G__getstructoffset())->operator=(*(Root::TGoodRunsList*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->AddGRL(*(Root::TGoodRunsList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetOverlapWith(*(Root::TGoodRunsList*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetSumWith(*(Root::TGoodRunsList*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetPartOnlyIn(*(Root::TGoodRunsList*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetPartNotIn(*(Root::TGoodRunsList*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->HasTriggerInfo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->HasRun(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->HasRunLumiBlock(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->HasSameGRLInfo(*(Root::TGoodRunsList*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->HasOverlapWith(*(Root::TGoodRunsList*) libp->para[0].ref, (bool) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->HasOverlapWith(*(Root::TGoodRunsList*) libp->para[0].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->AddRunLumiBlock(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->SetVersion(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->AddMetaData(*(TString*) libp->para[0].ref, *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->SetMetaData(*(map<TString,TString>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Root::TGoodRunsList*) G__getstructoffset())->SetCheckGRLInfo((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Root::TGoodRunsList*) G__getstructoffset())->SetCheckGRLInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Bool_t& obj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetCheckGRLInfo();
         result7->ref = (long) (&obj);
         G__letint(result7, 'g', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetVersion();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<TString,TString>& obj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetMetaData();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->GetMetaDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const Root::TGoodRunsList*) G__getstructoffset())->Summary((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const Root::TGoodRunsList*) G__getstructoffset())->Summary();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGoodRunsList*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<int>* pobj;
         const vector<int> xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetRunlist();
         pobj = new vector<int>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun>* pobj;
         const vector<Root::TGoodRun> xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetGoodRuns();
         pobj = new vector<Root::TGoodRun>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetTriggerList();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<std::string>* pobj;
         const vector<std::string> xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetStreamList();
         pobj = new vector<std::string>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const Root::TGoodRunsList*) G__getstructoffset())->GetSuggestedName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->Compress();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::TGoodRunsList::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsList::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::TGoodRunsList::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::TGoodRunsList::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsList*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsList::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRunsList::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsList::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_484_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRunsList::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TGoodRunsList G__TRootcLcLTGoodRunsList;
static int G__TGoodRunsListsCint_484_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TGoodRunsList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TGoodRunsList*) (soff+(sizeof(Root::TGoodRunsList)*i)))->~G__TRootcLcLTGoodRunsList();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TGoodRunsList*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TGoodRunsList*) (soff))->~G__TRootcLcLTGoodRunsList();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > */
static int G__TGoodRunsListsCint_487_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >[n];
     } else {
       p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >;
     } else {
       p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >& obj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->operator=(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->begin();
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->end();
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->rbegin();
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->rend();
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun& obj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->operator[](*(int*) G__Intref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator,bool>* pobj;
         pair<map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator,bool> xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->insert(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type*) libp->para[0].ref);
         pobj = new pair<map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator,bool>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->insert(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[0])), *(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type*) libp->para[1].ref);
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->insert(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->insert(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->erase(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->erase(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->erase(*((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[0])), *((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->swap(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->find(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->count(*(int*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->lower_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_487_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) G__getstructoffset())->upper_bound(*(int*) G__Intref(&libp->para[0]));
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > G__TmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR;
static int G__TGoodRunsListsCint_487_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) (soff+(sizeof(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >)*i)))->~G__TmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*) (soff))->~G__TmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* pair<int,Root::TGoodRun> */
static int G__TGoodRunsListsCint_488_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<int,Root::TGoodRun>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<int,Root::TGoodRun>[n];
     } else {
       p = new((void*) gvp) pair<int,Root::TGoodRun>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new pair<int,Root::TGoodRun>;
     } else {
       p = new((void*) gvp) pair<int,Root::TGoodRun>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_488_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   pair<int,Root::TGoodRun>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new pair<int,Root::TGoodRun>(*(int*) G__Intref(&libp->para[0]), *(Root::TGoodRun*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) pair<int,Root::TGoodRun>(*(int*) G__Intref(&libp->para[0]), *(Root::TGoodRun*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TGoodRunsListsCint_488_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   pair<int,Root::TGoodRun>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new pair<int,Root::TGoodRun>(*(pair<int,Root::TGoodRun>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef pair<int,Root::TGoodRun> G__TpairlEintcORootcLcLTGoodRungR;
static int G__TGoodRunsListsCint_488_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (pair<int,Root::TGoodRun>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((pair<int,Root::TGoodRun>*) (soff+(sizeof(pair<int,Root::TGoodRun>)*i)))->~G__TpairlEintcORootcLcLTGoodRungR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (pair<int,Root::TGoodRun>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((pair<int,Root::TGoodRun>*) (soff))->~G__TpairlEintcORootcLcLTGoodRungR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator */
static int G__TGoodRunsListsCint_489_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator[n];
     } else {
       p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator;
     } else {
       p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator& obj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator=(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type& obj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator& obj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator& obj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator* pobj;
         map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator xobj = ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator==(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) G__getstructoffset())->operator!=(*(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator G__TmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator;
static int G__TGoodRunsListsCint_489_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) (soff+(sizeof(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator)*i)))->~G__TmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*) (soff))->~G__TmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Root::TGoodRun,allocator<Root::TGoodRun> > */
static int G__TGoodRunsListsCint_505_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->at((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->begin();
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->end();
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->rbegin();
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->rend();
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->resize((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->resize((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]), *((Root::TGoodRun*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->operator[]((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >[n];
     } else {
       p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >;
     } else {
       p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]), *(Root::TGoodRun*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]), *(Root::TGoodRun*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->operator=(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->reserve((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRun& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->push_back(*(Root::TGoodRun*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->swap(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->insert(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__int(libp->para[0])), *(Root::TGoodRun*) libp->para[1].ref);
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->insert(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator*) G__int(libp->para[1]))
, *((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->insert(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__int(libp->para[0])), (vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type) G__int(libp->para[1])
, *(Root::TGoodRun*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->erase(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->erase(*((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_505_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Root::TGoodRun,allocator<Root::TGoodRun> > G__TvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR;
static int G__TGoodRunsListsCint_505_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) (soff+(sizeof(vector<Root::TGoodRun,allocator<Root::TGoodRun> >)*i)))->~G__TvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >*) (soff))->~G__TvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator */
static int G__TGoodRunsListsCint_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator;
     } else {
       p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(libp->para[0].ref ? *(const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer*) libp->para[0].ref : *(const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(libp->para[0].ref ? *(const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer*) libp->para[0].ref : *(const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::reference obj = ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::reference obj = ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator[](*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator+=(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator+(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator& obj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator-=(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator-(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer& obj = ((const vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* pobj;
         vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator xobj = ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) G__getstructoffset())->operator=(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) libp->para[0].ref);
         pobj = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TGoodRunsListsCint_506_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator(*(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator G__TvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator;
static int G__TGoodRunsListsCint_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) (soff+(sizeof(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator)*i)))->~G__TvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*) (soff))->~G__TvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TGRLCollection */
static int G__TGoodRunsListsCint_509_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGRLCollection* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGRLCollection((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Root::TGRLCollection((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TGRLCollection[n];
       } else {
         p = new((void*) gvp) Root::TGRLCollection[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TGRLCollection;
       } else {
         p = new((void*) gvp) Root::TGRLCollection;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGRLCollection* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TGRLCollection(*(Root::TGRLCollection*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Root::TGRLCollection(*(Root::TGRLCollection*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGRLCollection& obj = ((Root::TGRLCollection*) G__getstructoffset())->operator=(*(Root::TGRLCollection*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGRLCollection*) G__getstructoffset())->SetVersion(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGRLCollection*) G__getstructoffset())->SetMetaData(*(map<TString,TString>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Root::TGRLCollection*) G__getstructoffset())->SetCheckGRLInfo((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Root::TGRLCollection*) G__getstructoffset())->SetCheckGRLInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGRLCollection*) G__getstructoffset())->HasRun(*(Int_t*) G__Intref(&libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGRLCollection*) G__getstructoffset())->HasRunLumiBlock(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGRLCollection*) G__getstructoffset())->IsEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Root::TGRLCollection*) G__getstructoffset())->HasGoodRunsList(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGRLCollection*) G__getstructoffset())->GetMergedGoodRunsList(*(Root::BoolOperation*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGRLCollection*) G__getstructoffset())->GetMergedGoodRunsList();
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGRLCollection*) G__getstructoffset())->GetGoodRunsList((unsigned int) G__int(libp->para[0]));
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((Root::TGRLCollection*) G__getstructoffset())->find(*(TString*) libp->para[0].ref);
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator* pobj;
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator xobj = ((const Root::TGRLCollection*) G__getstructoffset())->find(*(TString*) libp->para[0].ref);
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const Root::TGRLCollection* pobj;
         const Root::TGRLCollection xobj = ((const Root::TGRLCollection*) G__getstructoffset())->GetMergedGRLCollection(*(Root::BoolOperation*) libp->para[0].ref);
         pobj = new Root::TGRLCollection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const Root::TGRLCollection* pobj;
         const Root::TGRLCollection xobj = ((const Root::TGRLCollection*) G__getstructoffset())->GetMergedGRLCollection();
         pobj = new Root::TGRLCollection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGRLCollection* pobj;
         const Root::TGRLCollection xobj = ((const Root::TGRLCollection*) G__getstructoffset())->GetOverlapWith(*(Root::TGoodRunsList*) libp->para[0].ref);
         pobj = new Root::TGRLCollection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGRLCollection*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const Root::TGRLCollection*) G__getstructoffset())->Summary((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const Root::TGRLCollection*) G__getstructoffset())->Summary();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::TGRLCollection::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGRLCollection::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::TGRLCollection::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::TGRLCollection::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGRLCollection*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGRLCollection::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGRLCollection::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGRLCollection::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_509_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGRLCollection::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TGRLCollection G__TRootcLcLTGRLCollection;
static int G__TGoodRunsListsCint_509_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TGRLCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TGRLCollection*) (soff+(sizeof(Root::TGRLCollection)*i)))->~G__TRootcLcLTGRLCollection();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TGRLCollection*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TGRLCollection*) (soff))->~G__TRootcLcLTGRLCollection();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > */
static int G__TGoodRunsListsCint_511_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->at((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->begin();
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->end();
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->rbegin();
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->rend();
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->max_size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->resize((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->resize((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]), *((Root::TGoodRunsList*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->capacity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->empty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->operator[]((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >[n];
     } else {
       p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >;
     } else {
       p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]), *(Root::TGoodRunsList*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]), *(Root::TGoodRunsList*) libp->para[1].ref);
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->operator=(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->reserve((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->front();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->back();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->push_back(*(Root::TGoodRunsList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->swap(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->insert(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__int(libp->para[0])), *(Root::TGoodRunsList*) libp->para[1].ref);
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->insert(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator*) G__int(libp->para[1]))
, *((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->insert(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__int(libp->para[0])), (vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type) G__int(libp->para[1])
, *(Root::TGoodRunsList*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->pop_back();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->erase(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->erase(*((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__int(libp->para[0])), *((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_511_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > G__TvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR;
static int G__TGoodRunsListsCint_511_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) (soff+(sizeof(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >)*i)))->~G__TvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*) (soff))->~G__TvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator */
static int G__TGoodRunsListsCint_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator[n];
     } else {
       p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator;
     } else {
       p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(libp->para[0].ref ? *(const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer*) libp->para[0].ref : *(const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   } else {
     p = new((void*) gvp) vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(libp->para[0].ref ? *(const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer*) libp->para[0].ref : *(const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer*) (&G__Mlong(libp->para[0])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::reference obj = ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator*();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator->());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator++();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator++((int) G__int(libp->para[0]));
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator--();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator--((int) G__int(libp->para[0]));
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::reference obj = ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator[](*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator+=(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator+(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator& obj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator-=(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator-(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type*) G__Longref(&libp->para[0]));
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer& obj = ((const vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->base();
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_512_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* pobj;
         vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator xobj = ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) G__getstructoffset())->operator=(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) libp->para[0].ref);
         pobj = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TGoodRunsListsCint_512_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator(*(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator G__TvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator;
static int G__TGoodRunsListsCint_512_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) (soff+(sizeof(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator)*i)))->~G__TvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*) (soff))->~G__TvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TGoodRunsListWriter */
static int G__TGoodRunsListsCint_515_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsListWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsListWriter[n];
     } else {
       p = new((void*) gvp) Root::TGoodRunsListWriter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsListWriter;
     } else {
       p = new((void*) gvp) Root::TGoodRunsListWriter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsListWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Root::TGoodRunsListWriter(*(Root::TGoodRunsList*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   } else {
     p = new((void*) gvp) Root::TGoodRunsListWriter(*(Root::TGoodRunsList*) libp->para[0].ref, *(TString*) libp->para[1].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Root::TGoodRunsListWriter*) G__getstructoffset())->WriteXMLFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Root::TGoodRunsListWriter*) G__getstructoffset())->WriteXMLFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((Root::TGoodRunsListWriter*) G__getstructoffset())->GetXMLString();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<TString>& obj = ((Root::TGoodRunsListWriter*) G__getstructoffset())->GetXMLStrings();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TGoodRunsListWriter*) G__getstructoffset())->GetFilename();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsListWriter*) G__getstructoffset())->GetMergedGoodRunsList(*(Root::BoolOperation*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsListWriter*) G__getstructoffset())->GetMergedGoodRunsList();
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGRLCollection& obj = ((const Root::TGoodRunsListWriter*) G__getstructoffset())->GetGRLCollection();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetMergeGoodRunsLists((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetMergeGoodRunsLists();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetCheckGRLInfo((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetCheckGRLInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetIndividuals((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetIndividuals();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetGRLCollection(*(Root::TGRLCollection*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetGoodRunsList(*(Root::TGoodRunsList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetFilename(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->SetPrefix(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->AddGoodRunsList(*(Root::TGoodRunsList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::TGoodRunsListWriter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsListWriter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::TGoodRunsListWriter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::TGoodRunsListWriter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListWriter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsListWriter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRunsListWriter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsListWriter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_515_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRunsListWriter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TGoodRunsListWriter G__TRootcLcLTGoodRunsListWriter;
static int G__TGoodRunsListsCint_515_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TGoodRunsListWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TGoodRunsListWriter*) (soff+(sizeof(Root::TGoodRunsListWriter)*i)))->~G__TRootcLcLTGoodRunsListWriter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TGoodRunsListWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TGoodRunsListWriter*) (soff))->~G__TRootcLcLTGoodRunsListWriter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Root::TGoodRunsListReader */
static int G__TGoodRunsListsCint_521_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsListReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsListReader((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Root::TGoodRunsListReader((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TGoodRunsListReader[n];
       } else {
         p = new((void*) gvp) Root::TGoodRunsListReader[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Root::TGoodRunsListReader;
       } else {
         p = new((void*) gvp) Root::TGoodRunsListReader;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Root::TGoodRunsListReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsListReader(*(TString*) libp->para[0].ref, (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Root::TGoodRunsListReader(*(TString*) libp->para[0].ref, (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Root::TGoodRunsListReader(*(TString*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) Root::TGoodRunsListReader(*(TString*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((Root::TGoodRunsListReader*) G__getstructoffset())->Interpret());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetXMLString();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetXMLFilename();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListReader*) G__getstructoffset())->AddXMLFile(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListReader*) G__getstructoffset())->AddXMLString(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListReader*) G__getstructoffset())->SetXMLString(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListReader*) G__getstructoffset())->SetXMLFile(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((Root::TGoodRunsListReader*) G__getstructoffset())->SetCheckGRLInfo((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((Root::TGoodRunsListReader*) G__getstructoffset())->SetCheckGRLInfo();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetMergedGoodRunsList(*(Root::BoolOperation*) libp->para[0].ref);
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetMergedGoodRunsList();
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList* pobj;
         const Root::TGoodRunsList xobj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetGoodRunsList((unsigned int) G__int(libp->para[0]));
         pobj = new Root::TGoodRunsList(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGRLCollection* pobj;
         const Root::TGRLCollection xobj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetGRLCollection();
         pobj = new Root::TGRLCollection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      {
         const Root::TGRLCollection* pobj;
         const Root::TGRLCollection xobj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetMergedGRLCollection(*(Root::BoolOperation*) libp->para[0].ref);
         pobj = new Root::TGRLCollection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 0:
      {
         const Root::TGRLCollection* pobj;
         const Root::TGRLCollection xobj = ((const Root::TGoodRunsListReader*) G__getstructoffset())->GetMergedGRLCollection();
         pobj = new Root::TGRLCollection(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListReader*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Root::TGoodRunsListReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsListReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Root::TGoodRunsListReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Root::TGoodRunsListReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Root::TGoodRunsListReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsListReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRunsListReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Root::TGoodRunsListReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_521_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Root::TGoodRunsListReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Root::TGoodRunsListReader G__TRootcLcLTGoodRunsListReader;
static int G__TGoodRunsListsCint_521_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Root::TGoodRunsListReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Root::TGoodRunsListReader*) (soff+(sizeof(Root::TGoodRunsListReader)*i)))->~G__TRootcLcLTGoodRunsListReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Root::TGoodRunsListReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Root::TGoodRunsListReader*) (soff))->~G__TRootcLcLTGoodRunsListReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DQ */
static int G__TGoodRunsListsCint_522_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DQ::SetXMLFile(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_522_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Root::TGoodRunsList& obj = DQ::GetGRL();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TGoodRunsListsCint_522_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) DQ::PassRunLB((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Root */

/* Root::RegularFormula */

/* Root::TLumiBlockRange */

/* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > */

/* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator */

/* Root::TGoodRun */

/* Root::TGoodRunsList */

/* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > */

/* pair<int,Root::TGoodRun> */

/* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator */

/* vector<Root::TGoodRun,allocator<Root::TGoodRun> > */

/* vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator */

/* Root::TGRLCollection */

/* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > */

/* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator */

/* Root::TGoodRunsListWriter */

/* Root::TGoodRunsListReader */

/* DQ */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTGoodRunsListsCint {
 public:
  G__Sizep2memfuncTGoodRunsListsCint(): p(&G__Sizep2memfuncTGoodRunsListsCint::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTGoodRunsListsCint::*p)();
};

size_t G__get_sizep2memfuncTGoodRunsListsCint()
{
  G__Sizep2memfuncTGoodRunsListsCint a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTGoodRunsListsCint() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula))) {
     Root::RegularFormula *G__Lderived;
     G__Lderived=(Root::RegularFormula*)0x1000;
     {
       TFormula *G__Lpbase=(TFormula*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TFormula),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange))) {
     Root::TLumiBlockRange *G__Lderived;
     G__Lderived=(Root::TLumiBlockRange*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun))) {
     Root::TGoodRun *G__Lderived;
     G__Lderived=(Root::TGoodRun*)0x1000;
     {
       vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > *G__Lpbase=(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList))) {
     Root::TGoodRunsList *G__Lderived;
     G__Lderived=(Root::TGoodRunsList*)0x1000;
     {
       map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > *G__Lpbase=(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection))) {
     Root::TGRLCollection *G__Lderived;
     G__Lderived=(Root::TGRLCollection*)0x1000;
     {
       vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > *G__Lpbase=(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter))) {
     Root::TGoodRunsListWriter *G__Lderived;
     G__Lderived=(Root::TGoodRunsListWriter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader))) {
     Root::TGoodRunsListReader *G__Lderived;
     G__Lderived=(Root::TGoodRunsListReader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader),G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTGoodRunsListsCint() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<TSchemaHelper>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("list<TString>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_listlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TMsgLevel,std::string>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplERootcLcLTMsgLevelcOstringcOlesslERootcLcLTMsgLevelgRcOallocatorlEpairlEconstsPRootcLcLTMsgLevelcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Root::TMsgLevel,string>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplERootcLcLTMsgLevelcOstringcOlesslERootcLcLTMsgLevelgRcOallocatorlEpairlEconstsPRootcLcLTMsgLevelcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Root::TMsgLevel,string,less<Root::TMsgLevel> >",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplERootcLcLTMsgLevelcOstringcOlesslERootcLcLTMsgLevelgRcOallocatorlEpairlEconstsPRootcLcLTMsgLevelcOstringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Root::TLumiBlockRange>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),257,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TLumiBlockRange>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_Root));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TGoodRun>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_type",105,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mapped_type",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("key_compare",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_lesslEintgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("allocator_type",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_allocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLreverse_iterator),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,Root::TGoodRun>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,Root::TGoodRun,less<int> >",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString,less<TString> >",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Root::TGoodRun>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),257,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::string>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGoodRunsList>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("value_type",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),257,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_pointer",85,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reference",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("size_type",107,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("difference_type",108,-1,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator),256,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("const_reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Root::TGoodRunsList>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Root::TGoodRun>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Root::TGoodRun>",117,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Root */
static void G__setup_memvarRoot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_Root));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kVERBOSE=1",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kDEBUG=2",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kINFO=3",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kWARNING=4",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kERROR=5",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kFATAL=6",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel),-1,-2,1,"kALWAYS=7",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLBoolOperation),-1,-2,1,"OR=0",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLBoolOperation),-1,-2,1,"AND=1",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Root::RegularFormula */
static void G__setup_memvarRootcLcLRegularFormula(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula));
   { Root::RegularFormula *p; p=(Root::RegularFormula*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_expr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_listlETStringcOallocatorlETStringgRsPgR),G__defined_typename("list<TString>"),-1,4,"m_par=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Root::TLumiBlockRange */
static void G__setup_memvarRootcLcLTLumiBlockRange(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange));
   { Root::TLumiBlockRange *p; p=(Root::TLumiBlockRange*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_begin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_end=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > */
static void G__setup_memvarvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   { vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > *p; p=(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator */
static void G__setup_memvarvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   { vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator *p; p=(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* Root::TGoodRun */
static void G__setup_memvarRootcLcLTGoodRun(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun));
   { Root::TGoodRun *p; p=(Root::TGoodRun*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_runnr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Root::TGoodRunsList */
static void G__setup_memvarRootcLcLTGoodRunsList(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList));
   { Root::TGoodRunsList *p; p=(Root::TGoodRunsList*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_version=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"m_metadata=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_checkGRLInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_hasRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_hasLB=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_prevRun=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_prevLB=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > */
static void G__setup_memvarmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   { map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > *p; p=(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* pair<int,Root::TGoodRun> */
static void G__setup_memvarpairlEintcORootcLcLTGoodRungR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR));
   { pair<int,Root::TGoodRun> *p; p=(pair<int,Root::TGoodRun>*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->first)-(long)(p)),105,0,0,-1,-1,-1,1,"first=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->second)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),-1,-1,1,"second=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator */
static void G__setup_memvarmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator));
   { map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator *p; p=(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<Root::TGoodRun,allocator<Root::TGoodRun> > */
static void G__setup_memvarvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   { vector<Root::TGoodRun,allocator<Root::TGoodRun> > *p; p=(vector<Root::TGoodRun,allocator<Root::TGoodRun> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator */
static void G__setup_memvarvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   { vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator *p; p=(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* Root::TGRLCollection */
static void G__setup_memvarRootcLcLTGRLCollection(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection));
   { Root::TGRLCollection *p; p=(Root::TGRLCollection*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_checkGRLInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > */
static void G__setup_memvarvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   { vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > *p; p=(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator */
static void G__setup_memvarvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   { vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator *p; p=(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* Root::TGoodRunsListWriter */
static void G__setup_memvarRootcLcLTGoodRunsListWriter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter));
   { Root::TGoodRunsListWriter *p; p=(Root::TGoodRunsListWriter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection),-1,-1,4,"m_grlvec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),-1,-1,4,"m_grl=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"m_xmlstringVec=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_xmlstring=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_dataCardName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_prefix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLogger),-1,-1,4,"m_logger=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_mergegrls=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_individuals=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Root::TGoodRunsListReader */
static void G__setup_memvarRootcLcLTGoodRunsListReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader));
   { Root::TGoodRunsListReader *p; p=(Root::TGoodRunsListReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_xmlstring=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString),-1,-1,4,"m_dataCardName=",0,"current xmlfile processed");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"m_dataCardList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"m_xmlstringList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTMsgLogger),-1,-1,4,"m_logger=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection),-1,-1,4,"m_grlvec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DQ */
static void G__setup_memvarDQ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_DQ));
   {
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTGoodRunsListsCint() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRoot(void) {
   /* Root */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_Root));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLRegularFormula(void) {
   /* Root::RegularFormula */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula));
   G__memfunc_setup("RegularFormula",1448,G__TGoodRunsListsCint_197_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegularFormula",1448,G__TGoodRunsListsCint_197_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RegularFormula",1448,G__TGoodRunsListsCint_197_0_3, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula), -1, 0, 1, 1, 1, 0, "u 'Root::RegularFormula' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_197_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula), -1, 1, 1, 1, 1, 0, "u 'Root::RegularFormula' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFormula",1058,G__TGoodRunsListsCint_197_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - - 10 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPars",804,G__TGoodRunsListsCint_197_0_6, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParNames",1111,G__TGoodRunsListsCint_197_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_listlETStringcOallocatorlETStringgRsPgR), G__defined_typename("list<TString>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("parseExpression",1611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - - 10 - expression u 'TString' - 1 - expr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_197_0_9, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::RegularFormula::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_197_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::RegularFormula::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_197_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::RegularFormula::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_197_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::RegularFormula::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_197_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_197_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::RegularFormula::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_197_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::RegularFormula::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_197_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::RegularFormula::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_197_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::RegularFormula::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~RegularFormula", 1574, G__TGoodRunsListsCint_197_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTLumiBlockRange(void) {
   /* Root::TLumiBlockRange */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange));
   G__memfunc_setup("TLumiBlockRange",1475,G__TGoodRunsListsCint_477_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLumiBlockRange",1475,G__TGoodRunsListsCint_477_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 11 - start i - 'Int_t' 11 '2147483647' end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TLumiBlockRange",1475,G__TGoodRunsListsCint_477_0_3, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 0, 1, 1, 1, 0, "u 'Root::TLumiBlockRange' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_477_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 1, 1, 1, 1, 0, "u 'Root::TLumiBlockRange' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverlapWith",1429,G__TGoodRunsListsCint_477_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 0, 1, 1, 1, 9, "u 'Root::TLumiBlockRange' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartOnlyIn",1296,G__TGoodRunsListsCint_477_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), G__defined_typename("vector<Root::TLumiBlockRange>"), 0, 1, 1, 1, 9, "u 'Root::TLumiBlockRange' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartNotIn",1183,G__TGoodRunsListsCint_477_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), G__defined_typename("vector<Root::TLumiBlockRange>"), 0, 1, 1, 1, 9, "u 'Root::TLumiBlockRange' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Contains",831,G__TGoodRunsListsCint_477_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - number", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Begin",485,G__TGoodRunsListsCint_477_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("End",279,G__TGoodRunsListsCint_477_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__TGoodRunsListsCint_477_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBegin",785,G__TGoodRunsListsCint_477_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - begin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnd",579,G__TGoodRunsListsCint_477_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - end", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Summary",750,G__TGoodRunsListsCint_477_0_14, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_477_0_15, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::TLumiBlockRange::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_477_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TLumiBlockRange::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_477_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::TLumiBlockRange::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_477_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::TLumiBlockRange::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_477_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_477_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TLumiBlockRange::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_477_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TLumiBlockRange::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_477_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TLumiBlockRange::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_477_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TLumiBlockRange::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TLumiBlockRange", 1601, G__TGoodRunsListsCint_477_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR(void) {
   /* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR));
   G__memfunc_setup("at",213,G__TGoodRunsListsCint_479_0_1, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 1, 1, 1, 1, 0, "k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TGoodRunsListsCint_479_0_2, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TGoodRunsListsCint_479_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TGoodRunsListsCint_479_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TGoodRunsListsCint_479_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TGoodRunsListsCint_479_0_6, 107, -1, G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TGoodRunsListsCint_479_0_7, 107, -1, G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGoodRunsListsCint_479_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGoodRunsListsCint_479_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - sz u 'Root::TLumiBlockRange' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TGoodRunsListsCint_479_0_10, 107, -1, G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TGoodRunsListsCint_479_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_479_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 1, 1, 1, 1, 0, "k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >",5962,G__TGoodRunsListsCint_479_0_13, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >",5962,G__TGoodRunsListsCint_479_0_14, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - n u 'Root::TLumiBlockRange' - 11 'Root::TLumiBlockRange()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >",5962,G__TGoodRunsListsCint_479_0_15, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >",5962,G__TGoodRunsListsCint_479_0_16, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator' 10 - first u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_479_0_17, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TGoodRunsListsCint_479_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TGoodRunsListsCint_479_0_19, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TGoodRunsListsCint_479_0_20, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TGoodRunsListsCint_479_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TLumiBlockRange' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TGoodRunsListsCint_479_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_479_0_23, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 0 - position u 'Root::TLumiBlockRange' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_479_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 0 - position u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator' 10 - first "
"u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_479_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 0 - position k - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::size_type' 0 - n "
"u 'Root::TLumiBlockRange' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TGoodRunsListsCint_479_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_479_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_479_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 0 - first u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TGoodRunsListsCint_479_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >", 6088, G__TGoodRunsListsCint_479_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator(void) {
   /* vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_480_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_480_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'Root::TLumiBlockRange' 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__TGoodRunsListsCint_480_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__TGoodRunsListsCint_480_0_4, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_480_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_480_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_480_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_480_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_480_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TGoodRunsListsCint_480_0_10, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__TGoodRunsListsCint_480_0_11, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__TGoodRunsListsCint_480_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__TGoodRunsListsCint_480_0_13, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__TGoodRunsListsCint_480_0_14, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_480_0_15, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__TGoodRunsListsCint_480_0_16, (int) ('i'), G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__TGoodRunsListsCint_480_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTGoodRun(void) {
   /* Root::TGoodRun */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun));
   G__memfunc_setup("TGoodRun",786,G__TGoodRunsListsCint_482_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGoodRun",786,G__TGoodRunsListsCint_482_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - runnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGoodRun",786,G__TGoodRunsListsCint_482_0_3, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRun' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_482_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 1, 1, 1, 1, 0, "u 'Root::TGoodRun' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverlapWith",1429,G__TGoodRunsListsCint_482_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRun' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumWith",1009,G__TGoodRunsListsCint_482_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRun' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartOnlyIn",1296,G__TGoodRunsListsCint_482_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRun' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartNotIn",1183,G__TGoodRunsListsCint_482_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRun' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__TGoodRunsListsCint_482_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasLB",426,G__TGoodRunsListsCint_482_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Find",385,G__TGoodRunsListsCint_482_0_11, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Find",385,G__TGoodRunsListsCint_482_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator), G__defined_typename("vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::const_iterator"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunNumber",1214,G__TGoodRunsListsCint_482_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRunNumber",1226,G__TGoodRunsListsCint_482_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - runnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Summary",750,G__TGoodRunsListsCint_482_0_15, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,G__TGoodRunsListsCint_482_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compress",844,G__TGoodRunsListsCint_482_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLB",407,G__TGoodRunsListsCint_482_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_482_0_19, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::TGoodRun::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_482_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRun::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_482_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::TGoodRun::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_482_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::TGoodRun::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_482_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_482_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRun::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_482_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRun::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_482_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRun::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_482_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRun::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGoodRun", 912, G__TGoodRunsListsCint_482_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTGoodRunsList(void) {
   /* Root::TGoodRunsList */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList));
   G__memfunc_setup("TGoodRunsList",1313,G__TGoodRunsListsCint_484_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGoodRunsList",1313,G__TGoodRunsListsCint_484_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGoodRunsList",1313,G__TGoodRunsListsCint_484_0_3, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_484_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 1, 1, 1, 1, 0, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddGRL",494,G__TGoodRunsListsCint_484_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverlapWith",1429,G__TGoodRunsListsCint_484_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumWith",1009,G__TGoodRunsListsCint_484_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartOnlyIn",1296,G__TGoodRunsListsCint_484_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartNotIn",1183,G__TGoodRunsListsCint_484_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasTriggerInfo",1404,G__TGoodRunsListsCint_484_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRun",593,G__TGoodRunsListsCint_484_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - runnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRunLumiBlock",1491,G__TGoodRunsListsCint_484_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 11 - runnr i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasSameGRLInfo",1299,G__TGoodRunsListsCint_484_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasOverlapWith",1425,G__TGoodRunsListsCint_484_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"u 'Root::TGoodRunsList' - 11 - other g - - 0 'false' verb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRunLumiBlock",1472,G__TGoodRunsListsCint_484_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 11 - runnr i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__TGoodRunsListsCint_484_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddMetaData",1034,G__TGoodRunsListsCint_484_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - key u 'TString' - 11 - value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMetaData",1069,G__TGoodRunsListsCint_484_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >' 'map<TString,TString>' 11 - metadata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckGRLInfo",1403,G__TGoodRunsListsCint_484_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' check", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCheckGRLInfo",1391,G__TGoodRunsListsCint_484_0_20, 103, -1, G__defined_typename("Bool_t"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVersion",1030,G__TGoodRunsListsCint_484_0_21, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMetaData",1057,G__TGoodRunsListsCint_484_0_22, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR), G__defined_typename("map<TString,TString>"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMetaDataSize",1468,G__TGoodRunsListsCint_484_0_23, 104, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Summary",750,G__TGoodRunsListsCint_484_0_24, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__TGoodRunsListsCint_484_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunlist",1041,G__TGoodRunsListsCint_484_0_26, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<int>"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGoodRuns",1105,G__TGoodRunsListsCint_484_0_27, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR), G__defined_typename("vector<Root::TGoodRun>"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTriggerList",1424,G__TGoodRunsListsCint_484_0_28, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStreamList",1320,G__TGoodRunsListsCint_484_0_29, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR), G__defined_typename("vector<std::string>"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSuggestedName",1612,G__TGoodRunsListsCint_484_0_30, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compress",844,G__TGoodRunsListsCint_484_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_484_0_32, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::TGoodRunsList::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_484_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsList::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_484_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::TGoodRunsList::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_484_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::TGoodRunsList::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_484_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_484_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsList::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_484_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRunsList::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_484_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsList::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_484_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRunsList::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGoodRunsList", 1439, G__TGoodRunsListsCint_484_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR(void) {
   /* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR));
   G__memfunc_setup("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >",7094,G__TGoodRunsListsCint_487_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >",7094,G__TGoodRunsListsCint_487_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - first u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >",7094,G__TGoodRunsListsCint_487_0_3, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator' - 0 - first u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >",7094,G__TGoodRunsListsCint_487_0_4, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR), -1, 0, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_487_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR), -1, 1, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TGoodRunsListsCint_487_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TGoodRunsListsCint_487_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TGoodRunsListsCint_487_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TGoodRunsListsCint_487_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLreverse_iterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TGoodRunsListsCint_487_0_10, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TGoodRunsListsCint_487_0_11, 107, -1, G__defined_typename("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TGoodRunsListsCint_487_0_12, 107, -1, G__defined_typename("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_487_0_13, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 1, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_487_0_14, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiteratorcOboolgR), -1, 0, 1, 1, 1, 0, "u 'pair<int,Root::TGoodRun>' 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_487_0_15, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - position u 'pair<int,Root::TGoodRun>' 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type' 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_487_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - first u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_487_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator' - 0 - first u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_487_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_487_0_19, 107, -1, G__defined_typename("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::size_type"), 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_487_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - first u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TGoodRunsListsCint_487_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TGoodRunsListsCint_487_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TGoodRunsListsCint_487_0_23, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("count",553,G__TGoodRunsListsCint_487_0_24, 107, -1, G__defined_typename("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::size_type"), 0, 1, 1, 1, 8, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lower_bound",1184,G__TGoodRunsListsCint_487_0_25, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("upper_bound",1187,G__TGoodRunsListsCint_487_0_26, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >", 7220, G__TGoodRunsListsCint_487_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncpairlEintcORootcLcLTGoodRungR(void) {
   /* pair<int,Root::TGoodRun> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR));
   G__memfunc_setup("pair<int,Root::TGoodRun>",2247,G__TGoodRunsListsCint_488_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pair<int,Root::TGoodRun>",2247,G__TGoodRunsListsCint_488_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR), -1, 0, 2, 1, 1, 0, 
"i - - 11 - a u 'Root::TGoodRun' - 11 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR), -1, 1, 1, 1, 4, 0, "u 'pair<int,Root::TGoodRun>' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("pair<int,Root::TGoodRun>", 2247, G__TGoodRunsListsCint_488_0_4, (int) ('i'), 
G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR), -1, 0, 1, 1, 1, 0, "u 'pair<int,Root::TGoodRun>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~pair<int,Root::TGoodRun>", 2373, G__TGoodRunsListsCint_488_0_5, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator(void) {
   /* map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_489_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_489_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_489_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__TGoodRunsListsCint_489_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR), G__defined_typename("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__TGoodRunsListsCint_489_0_5, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR), G__defined_typename("map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::value_type"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_489_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_489_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_489_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_489_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator==",998,G__TGoodRunsListsCint_489_0_10, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__TGoodRunsListsCint_489_0_11, 103, -1, -1, 0, 1, 1, 1, 0, "u 'map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__TGoodRunsListsCint_489_0_12, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR(void) {
   /* vector<Root::TGoodRun,allocator<Root::TGoodRun> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR));
   G__memfunc_setup("at",213,G__TGoodRunsListsCint_505_0_1, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 1, 1, 1, 1, 0, "k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TGoodRunsListsCint_505_0_2, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TGoodRunsListsCint_505_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TGoodRunsListsCint_505_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR), G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TGoodRunsListsCint_505_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR), G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TGoodRunsListsCint_505_0_6, 107, -1, G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TGoodRunsListsCint_505_0_7, 107, -1, G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGoodRunsListsCint_505_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGoodRunsListsCint_505_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - sz u 'Root::TGoodRun' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TGoodRunsListsCint_505_0_10, 107, -1, G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TGoodRunsListsCint_505_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_505_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 1, 1, 1, 1, 0, "k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRun,allocator<Root::TGoodRun> >",4584,G__TGoodRunsListsCint_505_0_13, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRun,allocator<Root::TGoodRun> >",4584,G__TGoodRunsListsCint_505_0_14, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - n u 'Root::TGoodRun' - 11 'Root::TGoodRun()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRun,allocator<Root::TGoodRun> >",4584,G__TGoodRunsListsCint_505_0_15, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRun,allocator<Root::TGoodRun> >",4584,G__TGoodRunsListsCint_505_0_16, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator' 10 - first u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_505_0_17, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TGoodRunsListsCint_505_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TGoodRunsListsCint_505_0_19, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TGoodRunsListsCint_505_0_20, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TGoodRunsListsCint_505_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRun' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TGoodRunsListsCint_505_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_505_0_23, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 0 - position u 'Root::TGoodRun' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_505_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 0 - position u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator' 10 - first "
"u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_505_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 0 - position k - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::size_type' 0 - n "
"u 'Root::TGoodRun' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TGoodRunsListsCint_505_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_505_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_505_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 0 - first u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TGoodRunsListsCint_505_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<Root::TGoodRun,allocator<Root::TGoodRun> >", 4710, G__TGoodRunsListsCint_505_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator(void) {
   /* vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_506_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_506_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'Root::TGoodRun' 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__TGoodRunsListsCint_506_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__TGoodRunsListsCint_506_0_4, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_506_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_506_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_506_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_506_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_506_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TGoodRunsListsCint_506_0_10, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__TGoodRunsListsCint_506_0_11, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__TGoodRunsListsCint_506_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__TGoodRunsListsCint_506_0_13, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__TGoodRunsListsCint_506_0_14, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), G__defined_typename("vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_506_0_15, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__TGoodRunsListsCint_506_0_16, (int) ('i'), G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__TGoodRunsListsCint_506_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTGRLCollection(void) {
   /* Root::TGRLCollection */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection));
   G__memfunc_setup("TGRLCollection",1349,G__TGoodRunsListsCint_509_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' checkGRLInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGRLCollection",1349,G__TGoodRunsListsCint_509_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 0, 1, 1, 1, 0, "u 'Root::TGRLCollection' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_509_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 1, 1, 1, 1, 0, "u 'Root::TGRLCollection' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVersion",1042,G__TGoodRunsListsCint_509_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - version", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMetaData",1069,G__TGoodRunsListsCint_509_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >' 'map<TString,TString>' 11 - metadata", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckGRLInfo",1403,G__TGoodRunsListsCint_509_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' check", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRun",593,G__TGoodRunsListsCint_509_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 11 - runnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasRunLumiBlock",1491,G__TGoodRunsListsCint_509_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 11 - runnr i - 'Int_t' 11 - lumiblocknr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEmpty",715,G__TGoodRunsListsCint_509_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HasGoodRunsList",1513,G__TGoodRunsListsCint_509_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMergedGoodRunsList",2113,G__TGoodRunsListsCint_509_0_11, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "i 'Root::BoolOperation' - 11 'OR' operation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGoodRunsList",1517,G__TGoodRunsListsCint_509_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "h - - 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TGoodRunsListsCint_509_0_13, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("find",417,G__TGoodRunsListsCint_509_0_14, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator"), 0, 1, 1, 1, 8, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMergedGRLCollection",2149,G__TGoodRunsListsCint_509_0_15, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 0, 1, 1, 1, 9, "i 'Root::BoolOperation' - 11 'OR' operation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOverlapWith",1429,G__TGoodRunsListsCint_509_0_16, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 0, 1, 1, 1, 9, "u 'Root::TGoodRunsList' - 11 - other", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__TGoodRunsListsCint_509_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Summary",750,G__TGoodRunsListsCint_509_0_18, 121, -1, -1, 0, 1, 1, 1, 8, "g - 'Bool_t' 0 'kFALSE' verbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_509_0_19, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::TGRLCollection::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_509_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGRLCollection::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_509_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::TGRLCollection::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_509_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::TGRLCollection::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_509_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_509_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGRLCollection::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_509_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGRLCollection::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_509_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGRLCollection::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_509_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGRLCollection::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGRLCollection", 1475, G__TGoodRunsListsCint_509_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR(void) {
   /* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> > */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR));
   G__memfunc_setup("at",213,G__TGoodRunsListsCint_511_0_1, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 1, 1, 1, 1, 0, "k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("begin",517,G__TGoodRunsListsCint_511_0_2, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("end",311,G__TGoodRunsListsCint_511_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rbegin",631,G__TGoodRunsListsCint_511_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rend",425,G__TGoodRunsListsCint_511_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::reverse_iterator"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,G__TGoodRunsListsCint_511_0_6, 107, -1, G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("max_size",864,G__TGoodRunsListsCint_511_0_7, 107, -1, G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGoodRunsListsCint_511_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resize",658,G__TGoodRunsListsCint_511_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - sz u 'Root::TGoodRunsList' - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("capacity",846,G__TGoodRunsListsCint_511_0_10, 107, -1, G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("empty",559,G__TGoodRunsListsCint_511_0_11, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_511_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 1, 1, 1, 1, 0, "k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >",5638,G__TGoodRunsListsCint_511_0_13, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >",5638,G__TGoodRunsListsCint_511_0_14, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR), -1, 0, 2, 1, 1, 0, 
"k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - n u 'Root::TGoodRunsList' - 11 'Root::TGoodRunsList()' value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >",5638,G__TGoodRunsListsCint_511_0_15, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >",5638,G__TGoodRunsListsCint_511_0_16, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR), -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator' 10 - first u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_511_0_17, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR), -1, 1, 1, 1, 1, 0, "u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reserve",764,G__TGoodRunsListsCint_511_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("front",553,G__TGoodRunsListsCint_511_0_19, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("back",401,G__TGoodRunsListsCint_511_0_20, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TGoodRunsListsCint_511_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRunsList' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("swap",443,G__TGoodRunsListsCint_511_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >' - 1 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_511_0_23, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 0 - position u 'Root::TGoodRunsList' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_511_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 0 - position u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator' 10 - first "
"u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::const_iterator' 10 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insert",661,G__TGoodRunsListsCint_511_0_25, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 0 - position k - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::size_type' 0 - n "
"u 'Root::TGoodRunsList' - 11 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pop_back",831,G__TGoodRunsListsCint_511_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_511_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 0 - position", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("erase",528,G__TGoodRunsListsCint_511_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 0 - first u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 0 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TGoodRunsListsCint_511_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >", 5764, G__TGoodRunsListsCint_511_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator(void) {
   /* vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator));
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_512_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("iterator",874,G__TGoodRunsListsCint_512_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 5, 1, 0, "U 'Root::TGoodRunsList' 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer' 11 - __i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator*",918,G__TGoodRunsListsCint_512_0_3, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::reference"), 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator->",983,G__TGoodRunsListsCint_512_0_4, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_512_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__TGoodRunsListsCint_512_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_512_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__TGoodRunsListsCint_512_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "i - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TGoodRunsListsCint_512_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::reference"), 1, 1, 1, 1, 8, "l - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__TGoodRunsListsCint_512_0_10, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+",919,G__TGoodRunsListsCint_512_0_11, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__TGoodRunsListsCint_512_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 1, 1, 1, 1, 0, "l - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-",921,G__TGoodRunsListsCint_512_0_13, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 8, "l - 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::difference_type' 11 - __n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("base",411,G__TGoodRunsListsCint_512_0_14, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), G__defined_typename("vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator::pointer"), 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TGoodRunsListsCint_512_0_15, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 11 - x", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("iterator", 874, G__TGoodRunsListsCint_512_0_16, (int) ('i'), G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator), -1, 0, 1, 1, 1, 0, "u 'vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~iterator", 1000, G__TGoodRunsListsCint_512_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTGoodRunsListWriter(void) {
   /* Root::TGoodRunsListWriter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter));
   G__memfunc_setup("TGoodRunsListWriter",1950,G__TGoodRunsListsCint_515_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGoodRunsListWriter",1950,G__TGoodRunsListsCint_515_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter), -1, 0, 2, 1, 1, 0, 
"u 'Root::TGoodRunsList' - 11 - goodrunslist u 'TString' - 11 - dataCardName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteXMLFile",1148,G__TGoodRunsListsCint_515_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteXMLFiles",1263,G__TGoodRunsListsCint_515_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXMLString",1160,G__TGoodRunsListsCint_515_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXMLStrings",1275,G__TGoodRunsListsCint_515_0_6, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFilename",1089,G__TGoodRunsListsCint_515_0_7, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMergedGoodRunsList",2113,G__TGoodRunsListsCint_515_0_8, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "i 'Root::BoolOperation' - 11 'OR' operation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGRLCollection",1553,G__TGoodRunsListsCint_515_0_9, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMergeGoodRunsLists",2140,G__TGoodRunsListsCint_515_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' merge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckGRLInfo",1403,G__TGoodRunsListsCint_515_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' check", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndividuals",1448,G__TGoodRunsListsCint_515_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' indf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGRLCollection",1565,G__TGoodRunsListsCint_515_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TGRLCollection' - 11 - grlvec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGoodRunsList",1529,G__TGoodRunsListsCint_515_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRunsList' - 11 - goodrunslist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilename",1101,G__TGoodRunsListsCint_515_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - dataCardName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPrefix",922,G__TGoodRunsListsCint_515_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - prefix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddGoodRunsList",1494,G__TGoodRunsListsCint_515_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'Root::TGoodRunsList' - 11 - goodrunslist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteLumiRangeCollection",2459,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U '_xmlTextWriter' 'xmlTextWriterPtr' 0 - writer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteNamedLumiRange",1908,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U '_xmlTextWriter' 'xmlTextWriterPtr' 0 - writer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteMetadata",1324,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U '_xmlTextWriter' 'xmlTextWriterPtr' 0 - writer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteLumiBlockCollection",2457,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U '_xmlTextWriter' 'xmlTextWriterPtr' 0 - writer u 'Root::TGoodRun' - 11 - goodrun", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteElement",1237,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 4, 0, 
"U '_xmlTextWriter' 'xmlTextWriterPtr' 0 - writer C - - 10 - name "
"C - - 10 '0' value C - - 10 '0' atr1 "
"C - - 10 '0' val1 C - - 10 '0' atr2 "
"C - - 10 '0' val2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConvertInput",1265,(G__InterfaceMethod) NULL, 66, -1, G__defined_typename("xmlChar"), 0, 2, 1, 4, 0, 
"C - - 10 - in C - - 10 - encoding", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_515_0_25, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::TGoodRunsListWriter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_515_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsListWriter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_515_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::TGoodRunsListWriter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_515_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::TGoodRunsListWriter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_515_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_515_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsListWriter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_515_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRunsListWriter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_515_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsListWriter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_515_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRunsListWriter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGoodRunsListWriter", 2076, G__TGoodRunsListsCint_515_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRootcLcLTGoodRunsListReader(void) {
   /* Root::TGoodRunsListReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader));
   G__memfunc_setup("TGoodRunsListReader",1908,G__TGoodRunsListsCint_521_0_1, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' checkGRLInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TGoodRunsListReader",1908,G__TGoodRunsListsCint_521_0_2, 105, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 11 - dataCardName g - 'Bool_t' 0 'kFALSE' checkGRLInfo", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Interpret",957,G__TGoodRunsListsCint_521_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXMLString",1160,G__TGoodRunsListsCint_521_0_4, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXMLFilename",1330,G__TGoodRunsListsCint_521_0_5, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddXMLFile",890,G__TGoodRunsListsCint_521_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - xmlfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddXMLString",1137,G__TGoodRunsListsCint_521_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - xmlstring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXMLString",1172,G__TGoodRunsListsCint_521_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - xmlstring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXMLFile",925,G__TGoodRunsListsCint_521_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - xmlfile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCheckGRLInfo",1403,G__TGoodRunsListsCint_521_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' check", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMergedGoodRunsList",2113,G__TGoodRunsListsCint_521_0_11, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "i 'Root::BoolOperation' - 11 'OR' operation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGoodRunsList",1517,G__TGoodRunsListsCint_521_0_12, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 0, 1, 1, 1, 9, "h - - 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGRLCollection",1553,G__TGoodRunsListsCint_521_0_13, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMergedGRLCollection",2149,G__TGoodRunsListsCint_521_0_14, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection), -1, 0, 1, 1, 1, 9, "i 'Root::BoolOperation' - 11 'OR' operation", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__TGoodRunsListsCint_521_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadNamedLumiRange",1765,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadLumiBlockCollection",2314,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadAttribs",1109,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TXMLNode' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLumiBlockCollection",2222,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun), -1, 0, 1, 1, 4, 0, "U 'TXMLNode' - 0 - dataNode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TGoodRunsListsCint_521_0_20, 85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Root::TGoodRunsListReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TGoodRunsListsCint_521_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsListReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TGoodRunsListsCint_521_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Root::TGoodRunsListReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TGoodRunsListsCint_521_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Root::TGoodRunsListReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TGoodRunsListsCint_521_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TGoodRunsListsCint_521_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsListReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TGoodRunsListsCint_521_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRunsListReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TGoodRunsListsCint_521_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Root::TGoodRunsListReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TGoodRunsListsCint_521_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Root::TGoodRunsListReader::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TGoodRunsListReader", 2034, G__TGoodRunsListsCint_521_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDQ(void) {
   /* DQ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_DQ));
   G__memfunc_setup("SetXMLFile",925,G__TGoodRunsListsCint_522_0_1, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - filename", (char*)NULL, (void*) G__func2void( (void (*)(const TString&))(&DQ::SetXMLFile) ), 0);
   G__memfunc_setup("GetGRL",517,G__TGoodRunsListsCint_522_0_2, 117, G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) G__func2void( (Root::TGoodRunsList& (*)())(&DQ::GetGRL) ), 0);
   G__memfunc_setup("PassRunLB",858,G__TGoodRunsListsCint_522_0_3, 103, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - runnr i - - 0 - lbnr", (char*)NULL, (void*) G__func2void( (bool (*)(int, int))(&DQ::PassRunLB) ), 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTGoodRunsListsCint() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTGoodRunsListsCint() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTGoodRunsListsCint() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TGoodRunsListsCintLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_Root = { "Root" , 110 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TFormula = { "TFormula" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLRegularFormula = { "Root::RegularFormula" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_listlETStringcOallocatorlETStringgRsPgR = { "list<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_lesslEintgR = { "less<int>" , 115 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTMsgLevel = { "Root::TMsgLevel" , 101 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTMsgLogger = { "Root::TMsgLogger" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_maplERootcLcLTMsgLevelcOstringcOlesslERootcLcLTMsgLevelgRcOallocatorlEpairlEconstsPRootcLcLTMsgLevelcOstringgRsPgRsPgR = { "map<Root::TMsgLevel,string,less<Root::TMsgLevel>,allocator<pair<const Root::TMsgLevel,string> > >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange = { "Root::TLumiBlockRange" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR = { "vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator = { "vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTGoodRun = { "Root::TGoodRun" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList = { "Root::TGoodRunsList" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_allocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgR = { "allocator<pair<const int,Root::TGoodRun> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR = { "map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR = { "pair<int,Root::TGoodRun>" , 115 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator = { "map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLreverse_iterator = { "map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::reverse_iterator" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_pairlEmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiteratorcOboolgR = { "pair<map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator,bool>" , 115 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR = { "map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR = { "vector<Root::TGoodRun,allocator<Root::TGoodRun> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator = { "vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLBoolOperation = { "Root::BoolOperation" , 101 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTGRLCollection = { "Root::TGRLCollection" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR = { "vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator = { "vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN__xmlTextWriter = { "_xmlTextWriter" , 115 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter = { "Root::TGoodRunsListWriter" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_TXMLNode = { "TXMLNode" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader = { "Root::TGoodRunsListReader" , 99 , -1 };
G__linked_taginfo G__TGoodRunsListsCintLN_DQ = { "DQ" , 110 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTGoodRunsListsCint() {
  G__TGoodRunsListsCintLN_TClass.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TBuffer.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TMemberInspector.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TObject.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TNamed.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TString.tagnum = -1 ;
  G__TGoodRunsListsCintLN_Root.tagnum = -1 ;
  G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TFormula.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLRegularFormula.tagnum = -1 ;
  G__TGoodRunsListsCintLN_listlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_lesslEintgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTMsgLevel.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTMsgLogger.tagnum = -1 ;
  G__TGoodRunsListsCintLN_maplERootcLcLTMsgLevelcOstringcOlesslERootcLcLTMsgLevelgRcOallocatorlEpairlEconstsPRootcLcLTMsgLevelcOstringgRsPgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTGoodRun.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList.tagnum = -1 ;
  G__TGoodRunsListsCintLN_allocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLreverse_iterator.tagnum = -1 ;
  G__TGoodRunsListsCintLN_pairlEmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiteratorcOboolgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLBoolOperation.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTGRLCollection.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN__xmlTextWriter.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter.tagnum = -1 ;
  G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TGoodRunsListsCintLN_TXMLNode.tagnum = -1 ;
  G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader.tagnum = -1 ;
  G__TGoodRunsListsCintLN_DQ.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTGoodRunsListsCint() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TClass);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TObject);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TNamed);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TString);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_Root),0,-1,0,(char*)NULL,G__setup_memvarRoot,G__setup_memfuncRoot);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TFormula);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLRegularFormula),sizeof(Root::RegularFormula),-1,65280,(char*)NULL,G__setup_memvarRootcLcLRegularFormula,G__setup_memfuncRootcLcLRegularFormula);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_listlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_lesslEintgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_RootcLcLTMsgLevel);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_RootcLcLTMsgLogger);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_maplERootcLcLTMsgLevelcOstringcOlesslERootcLcLTMsgLevelgRcOallocatorlEpairlEconstsPRootcLcLTMsgLevelcOstringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTLumiBlockRange),sizeof(Root::TLumiBlockRange),-1,327424,(char*)NULL,G__setup_memvarRootcLcLTLumiBlockRange,G__setup_memfuncRootcLcLTLumiBlockRange);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR),sizeof(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >),-1,36608,(char*)NULL,G__setup_memvarvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR,G__setup_memfuncvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator),sizeof(vector<Root::TLumiBlockRange,allocator<Root::TLumiBlockRange> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator,G__setup_memfuncvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTLumiBlockRangecOallocatorlERootcLcLTLumiBlockRangegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRun),sizeof(Root::TGoodRun),-1,327424,(char*)NULL,G__setup_memvarRootcLcLTGoodRun,G__setup_memfuncRootcLcLTGoodRun);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsList),sizeof(Root::TGoodRunsList),-1,327424,(char*)NULL,G__setup_memvarRootcLcLTGoodRunsList,G__setup_memfuncRootcLcLTGoodRunsList);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_allocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR),sizeof(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >),-1,36608,(char*)NULL,G__setup_memvarmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR,G__setup_memfuncmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_pairlEintcORootcLcLTGoodRungR),sizeof(pair<int,Root::TGoodRun>),-1,35072,(char*)NULL,G__setup_memvarpairlEintcORootcLcLTGoodRungR,G__setup_memfuncpairlEintcORootcLcLTGoodRungR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator),sizeof(map<int,Root::TGoodRun,less<int>,allocator<pair<const int,Root::TGoodRun> > >::iterator),-1,2816,(char*)NULL,G__setup_memvarmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator,G__setup_memfuncmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_maplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLreverse_iterator);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_pairlEmaplEintcORootcLcLTGoodRuncOlesslEintgRcOallocatorlEpairlEconstsPintcORootcLcLTGoodRungRsPgRsPgRcLcLiteratorcOboolgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR),sizeof(vector<Root::TGoodRun,allocator<Root::TGoodRun> >),-1,36608,(char*)NULL,G__setup_memvarvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR,G__setup_memfuncvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator),sizeof(vector<Root::TGoodRun,allocator<Root::TGoodRun> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator,G__setup_memfuncvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRuncOallocatorlERootcLcLTGoodRungRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_RootcLcLBoolOperation);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGRLCollection),sizeof(Root::TGRLCollection),-1,327424,(char*)NULL,G__setup_memvarRootcLcLTGRLCollection,G__setup_memfuncRootcLcLTGRLCollection);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR),sizeof(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >),-1,36608,(char*)NULL,G__setup_memvarvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR,G__setup_memfuncvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_vectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator),sizeof(vector<Root::TGoodRunsList,allocator<Root::TGoodRunsList> >::iterator),-1,35072,(char*)NULL,G__setup_memvarvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator,G__setup_memfuncvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlERootcLcLTGoodRunsListcOallocatorlERootcLcLTGoodRunsListgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN__xmlTextWriter);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListWriter),sizeof(Root::TGoodRunsListWriter),-1,62720,(char*)NULL,G__setup_memvarRootcLcLTGoodRunsListWriter,G__setup_memfuncRootcLcLTGoodRunsListWriter);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TGoodRunsListsCintLN_TXMLNode);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_RootcLcLTGoodRunsListReader),sizeof(Root::TGoodRunsListReader),-1,62720,(char*)NULL,G__setup_memvarRootcLcLTGoodRunsListReader,G__setup_memfuncRootcLcLTGoodRunsListReader);
   G__tagtable_setup(G__get_linked_tagnum(&G__TGoodRunsListsCintLN_DQ),0,-1,0,(char*)NULL,G__setup_memvarDQ,G__setup_memfuncDQ);
}
extern "C" void G__cpp_setupTGoodRunsListsCint(void) {
  G__check_setup_version(30051515,"G__cpp_setupTGoodRunsListsCint()");
  G__set_cpp_environmentTGoodRunsListsCint();
  G__cpp_setup_tagtableTGoodRunsListsCint();

  G__cpp_setup_inheritanceTGoodRunsListsCint();

  G__cpp_setup_typetableTGoodRunsListsCint();

  G__cpp_setup_memvarTGoodRunsListsCint();

  G__cpp_setup_memfuncTGoodRunsListsCint();
  G__cpp_setup_globalTGoodRunsListsCint();
  G__cpp_setup_funcTGoodRunsListsCint();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTGoodRunsListsCint();
  return;
}
class G__cpp_setup_initTGoodRunsListsCint {
  public:
    G__cpp_setup_initTGoodRunsListsCint() { G__add_setup_func("TGoodRunsListsCint",(G__incsetup)(&G__cpp_setupTGoodRunsListsCint)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTGoodRunsListsCint() { G__remove_setup_func("TGoodRunsListsCint"); }
};
G__cpp_setup_initTGoodRunsListsCint G__cpp_setup_initializerTGoodRunsListsCint;

